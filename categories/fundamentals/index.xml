<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fundamentals on Hugo</title>
    <link>https://gohugo.io/categories/fundamentals/</link>
    <description>Recent content in fundamentals on Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://gohugo.io/categories/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Content organization</title>
      <link>https://gohugo.io/content-management/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/organization/</guid>
      <description>Page bundles Hugo 0.32 announced page-relative images and other resources packaged into Page Bundles.
These terms are connected, and you also need to read about Page Resources and Image Processing to get the full picture.
The illustration shows three bundles. Note that the home page bundle cannot contain other content pages, although other files (images etc.) are allowed. The bundle documentation is a work in progress. We will publish more comprehensive docs about this soon.</description>
    </item>
    <item>
      <title>Templating</title>
      <link>https://gohugo.io/templates/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/templates/introduction/</guid>
      <description>The following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs.
Go Templates provide an extremely simple template language that adheres to the belief that only the most basic of logic belongs in the template or view layer.
Basic syntax Go Templates are HTML files with the addition of variables and functions. Go Template variables and functions are accessible within {{ }}.</description>
    </item>
    <item>
      <title>Directory structure</title>
      <link>https://gohugo.io/getting-started/directory-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/getting-started/directory-structure/</guid>
      <description>Site skeleton Hugo generates a project skeleton when you create a new site. For example, this command:
hugo new site my-site Creates this directory structure:
my-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── themes/ └── hugo.toml &amp;lt;-- site configuration Depending on requirements, you may wish to organize your site configuration into subdirectories:
my-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── config/ &amp;lt;-- site configuration │ └── _default/ │ └── hugo.</description>
    </item>
    <item>
      <title>Template lookup order</title>
      <link>https://gohugo.io/templates/lookup-order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/templates/lookup-order/</guid>
      <description>Lookup rules Hugo takes the parameters listed below into consideration when choosing a template for a given page. The templates are ordered by specificity. This should feel natural, but look at the table below for concrete examples of the different parameter variations.
Kind The page Kind (the home page is one). See the example tables below per kind. This also determines if it is a single page (i.e. a regular content page.</description>
    </item>
    <item>
      <title>Base templates and blocks</title>
      <link>https://gohugo.io/templates/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/templates/base/</guid>
      <description>The block keyword allows you to define the outer shell of your pages&amp;rsquo; one or more master template(s) and then fill in or override portions as necessary.
Base template lookup order The base template lookup order closely follows that of the template it applies to (e.g. _default/list.html).
See Template Lookup Order for details and examples.
Define the base template The following defines a simple base template at _default/baseof.html. As a default template, it is the shell from which all your pages will be rendered unless you specify another *baseof.</description>
    </item>
    <item>
      <title>Configure Hugo</title>
      <link>https://gohugo.io/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/getting-started/configuration/</guid>
      <description>Configuration file Hugo uses the hugo.toml, hugo.yaml, or hugo.json (if found in the site root) as the default site configuration file.
The user can choose to override that default with one or more site configuration files using the command-line --config switch.
Examples:
hugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml Multiple site configuration files can be specified as a comma-separated string to the --config switch.
hugo.toml vs config.toml In Hugo 0.110.0 we changed the default configuration base file name to hugo, e.</description>
    </item>
    <item>
      <title>Configure markup</title>
      <link>https://gohugo.io/getting-started/configuration-markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/getting-started/configuration-markup/</guid>
      <description>Default handler By default, Hugo uses Goldmark to render markdown to HTML.
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; markup: defaultMarkdownHandler: goldmark [markup] defaultMarkdownHandler = &amp;#39;goldmark&amp;#39; { &amp;#34;markup&amp;#34;: { &amp;#34;defaultMarkdownHandler&amp;#34;: &amp;#34;goldmark&amp;#34; } } Files with the .md or .markdown extension are processed as markdown, provided that you have not specified a different content format using the markup field in front matter.
To use a different renderer for markdown files, specify one of asciidocext, org, pandoc, or rst in your site configuration.</description>
    </item>
    <item>
      <title>Build options</title>
      <link>https://gohugo.io/content-management/build-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/build-options/</guid>
      <description>They are stored in a reserved front matter object named _build with the following defaults:
yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; _build: list: always publishResources: true render: always [_build] list = &amp;#39;always&amp;#39; publishResources = true render = &amp;#39;always&amp;#39; { &amp;#34;_build&amp;#34;: { &amp;#34;list&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;publishResources&amp;#34;: true, &amp;#34;render&amp;#34;: &amp;#34;always&amp;#34; } } render If always, the page will be treated as a published page, holding its dedicated output files (index.html, etc&amp;hellip;) and permalink.</description>
    </item>
    <item>
      <title>Image processing</title>
      <link>https://gohugo.io/content-management/image-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/image-processing/</guid>
      <description>Image resources To process an image you must access the file as a page resource, global resource, or remote resource.
Page resource A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.
content/ └── posts/ └── post-1/ &amp;lt;-- page bundle ├── index.md └── sunset.jpg &amp;lt;-- page resource To access an image as a page resource:</description>
    </item>
    <item>
      <title>Custom output formats</title>
      <link>https://gohugo.io/templates/output-formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/templates/output-formats/</guid>
      <description>This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.
Media types A media type (formerly known as a MIME type) is a two-part identifier for file formats and format contents transmitted on the internet.
This is the full set of built-in media types in Hugo:
Type suffixes application/json [json] application/manifest&amp;#43;json [webmanifest] application/octet-stream [webmanifest] application/pdf [pdf] application/rss&amp;#43;xml [xml rss] application/toml [toml] application/wasm [wasm] application/xml [xml] application/yaml [yaml yml] font/otf [otf] font/ttf [ttf] image/bmp [bmp] image/gif [gif] image/jpeg [jpg jpeg jpe jif jfif] image/png [png] image/svg&amp;#43;xml [svg] image/tiff [tif tiff] image/webp [webp] text/calendar [ics] text/css [css] text/csv [csv] text/html [html] text/javascript [js jsm mjs] text/jsx [jsx] text/markdown [md markdown] text/plain [txt] text/tsx [tsx] text/typescript [ts] text/x-sass [sass] text/x-scss [scss] video/3gpp [3gpp 3gp] video/mp4 [mp4] video/mpeg [mpg mpeg] video/ogg [ogv] video/webm [webm] video/x-msvideo [avi] Note:</description>
    </item>
  </channel>
</rss>
