<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functions on Hugo</title>
    <link>https://gohugo.io/categories/functions/</link>
    <description>Recent content in functions on Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://gohugo.io/categories/functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>urldecode</title>
      <link>https://gohugo.io/functions/urldecode/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0100</pubDate>
      <guid>https://gohugo.io/functions/urldecode/</guid>
      <description>The following examples pull from a content file with the following front matter:
content/blog/neohugo.md +++ title = &amp;#34;A Forked of Hugo&amp;#34; location = &amp;#34;กรุงเทพ ไทย&amp;#34; +++ The following might be used as a partial within a single page template:
layouts/partials/content-header.html &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;{{.Title}}&amp;lt;/h1&amp;gt; {{ with .Params.location }} &amp;lt;div&amp;gt;&amp;lt;a href=&amp;#34;/locations/{{ urldecode ( . | urlize) }}&amp;#34;&amp;gt;{{.}}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; {{ end }} &amp;lt;/header&amp;gt; The preceding partial would then output to the rendered page as follows, assuming the page is being built with Hugo&amp;rsquo;s default pretty URLs.</description>
    </item>
    <item>
      <title>urlencode</title>
      <link>https://gohugo.io/functions/urlencode/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0100</pubDate>
      <guid>https://gohugo.io/functions/urlencode/</guid>
      <description>The following examples pull from a content file with the following front matter:
content/blog/greatest-city.md +++ title = &amp;#34;The World&amp;#39;s Greatest City&amp;#34; location = &amp;#34;Chicago IL&amp;#34; tags = [&amp;#34;pizza&amp;#34;,&amp;#34;beer&amp;#34;,&amp;#34;hot dogs&amp;#34;] +++ The following might be used as a partial within a single page template:
layouts/partials/content-header.html &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;{{.Title}}&amp;lt;/h1&amp;gt; {{ with .Params.location }} &amp;lt;div&amp;gt;&amp;lt;a href=&amp;#34;/locations/{{ . | urlencode}}&amp;#34;&amp;gt;{{.}}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; {{ end }} &amp;lt;!-- Creates a list of tags for the content and links to each of their pages --&amp;gt; {{ with .</description>
    </item>
    <item>
      <title>.AddDate</title>
      <link>https://gohugo.io/functions/adddate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/adddate/</guid>
      <description>{{ $d := &amp;#34;2022-01-01&amp;#34; | time.AsTime }} {{ $d.AddDate 0 0 1 | time.Format &amp;#34;2006-01-02&amp;#34; }} → 2022-01-02 {{ $d.AddDate 0 1 1 | time.Format &amp;#34;2006-01-02&amp;#34; }} → 2022-02-02 {{ $d.AddDate 1 1 1 | time.Format &amp;#34;2006-01-02&amp;#34; }} → 2023-02-02 {{ $d.AddDate -1 -1 -1 | time.Format &amp;#34;2006-01-02&amp;#34; }} → 2020-11-30 When adding months or years, Hugo normalizes the final time.Time value if the resulting day does not exist. For example, adding one month to 31 January produces 2 March or 3 March, depending on the year.</description>
    </item>
    <item>
      <title>.Format</title>
      <link>https://gohugo.io/functions/format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/format/</guid>
      <description>{{ $t := &amp;#34;2023-01-27T23:44:58-08:00&amp;#34; }} {{ $t = time.AsTime $t }} {{ $format := &amp;#34;2 Jan 2006&amp;#34; }} {{ $t.Format $format }} → 27 Jan 2023 To return a formatted and localized time.Time value, use the time.Format function instead.
Use the .Format method with any time.Time value, including the four predefined front matter dates:
{{ $format := &amp;#34;2 Jan 2006&amp;#34; }} {{ .Date.Format $format }} {{ .PublishDate.Format $format }} {{ .</description>
    </item>
    <item>
      <title>.Get</title>
      <link>https://gohugo.io/functions/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/get/</guid>
      <description>.Get is specifically used when creating your own shortcode template, to access the positional and named parameters passed to it. When used with a numeric INDEX, it queries positional parameters (starting with 0). With a string KEY, it queries named parameters.
When accessing named or positional parameters that do not exist, .Get returns an empty string instead of interrupting the build. This allows you to chain .Get with if, with, default or cond to check for parameter existence.</description>
    </item>
    <item>
      <title>.GetPage</title>
      <link>https://gohugo.io/functions/getpage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/getpage/</guid>
      <description>.GetPage returns a page of a given path. Both Site and Page implements this method. The Page variant will, if given a relative path &amp;ndash; i.e. a path without a leading / &amp;ndash; try look for the page relative to the current page.
Note: We overhauled and simplified the .GetPage API in Hugo 0.45. Before that you needed to provide a Kind attribute in addition to the path, e.g. {{ .</description>
    </item>
    <item>
      <title>.HasMenuCurrent</title>
      <link>https://gohugo.io/functions/hasmenucurrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/hasmenucurrent/</guid>
      <description>If the page object associated with the menu entry is a section, this method also returns true for any descendant of that section.
{{ $currentPage := . }} {{ range site.Menus.main }} {{ if $currentPage.IsMenuCurrent .Menu . }} &amp;lt;a class=&amp;#34;active&amp;#34; aria-current=&amp;#34;page&amp;#34; href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ else if $currentPage.HasMenuCurrent .Menu . }} &amp;lt;a class=&amp;#34;ancestor&amp;#34; aria-current=&amp;#34;true&amp;#34; href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ else }} &amp;lt;a href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ end }} {{ end }} See menu templates for a complete example.</description>
    </item>
    <item>
      <title>.IsMenuCurrent</title>
      <link>https://gohugo.io/functions/ismenucurrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/ismenucurrent/</guid>
      <description>{{ $currentPage := . }} {{ range site.Menus.main }} {{ if $currentPage.IsMenuCurrent .Menu . }} &amp;lt;a class=&amp;#34;active&amp;#34; aria-current=&amp;#34;page&amp;#34; href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ else if $currentPage.HasMenuCurrent .Menu . }} &amp;lt;a class=&amp;#34;ancestor&amp;#34; aria-current=&amp;#34;true&amp;#34; href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ else }} &amp;lt;a href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ end }} {{ end }} See menu templates for a complete example.</description>
    </item>
    <item>
      <title>.Param</title>
      <link>https://gohugo.io/functions/param/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/param/</guid>
      <description>The .Param method on .Page looks for the given KEY in page parameters, and returns the corresponding value. If it cannot find the KEY in page parameters, it looks for the KEY in site parameters. If it cannot find the KEY in either location, the .Param method returns nil.
Site and theme developers commonly set parameters at the site level, allowing content authors to override those parameters at the page level.</description>
    </item>
    <item>
      <title>.Render</title>
      <link>https://gohugo.io/functions/render/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/render/</guid>
      <description>The view is an alternative layout and should be a file name that points to a template in one of the locations specified in the documentation for Content Views.
This function is only available when applied to a single piece of content within a list context.
This example could render a piece of content using the content view located at /layouts/_default/summary.html:
{{ range .Pages }} {{ .Render &amp;#34;summary&amp;#34; }} {{ end }} </description>
    </item>
    <item>
      <title>.RenderString</title>
      <link>https://gohugo.io/functions/renderstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/renderstring/</guid>
      <description>.RenderString is a method on Page that renders some markup to HTML using the content renderer defined for that page (if not set in the options).
The method takes an optional map argument with these options:
display (&amp;ldquo;inline&amp;rdquo;) inline or block. If inline (default), surrounding &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; on short snippets will be trimmed. markup (defaults to the Page&amp;rsquo;s markup) See identifiers in List of content formats. Some examples:
{{ $optBlock := dict &amp;#34;display&amp;#34; &amp;#34;block&amp;#34; }} {{ $optOrg := dict &amp;#34;markup&amp;#34; &amp;#34;org&amp;#34; }} {{ &amp;#34;**Bold Markdown**&amp;#34; | $p.</description>
    </item>
    <item>
      <title>.Scratch</title>
      <link>https://gohugo.io/functions/scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/scratch/</guid>
      <description>Scratch is a Hugo feature designed to conveniently manipulate data in a Go Template world. It is either a Page or Shortcode method for which the resulting data will be attached to the given context, or it can live as a unique instance stored in a variable.
Note that Scratch was initially created as a workaround for a Go template scoping limitation that affected Hugo versions prior to 0.48. For a detailed analysis of .</description>
    </item>
    <item>
      <title>.Store</title>
      <link>https://gohugo.io/functions/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/store/</guid>
      <description>The .Store method on .Page returns a Scratch to store and manipulate data. In contrast to the .Scratch method, this Scratch is not reset on server rebuilds.
Methods .Set Sets the value of a given key.
{{ .Store.Set &amp;#34;greeting&amp;#34; &amp;#34;Hello&amp;#34; }} .Get Gets the value of a given key.
{{ .Store.Set &amp;#34;greeting&amp;#34; &amp;#34;Hello&amp;#34; }} {{ .Store.Get &amp;#34;greeting&amp;#34; }} → Hello .Add Adds a given value to existing value(s) of the given key.</description>
    </item>
    <item>
      <title>.Unix</title>
      <link>https://gohugo.io/functions/unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/unix/</guid>
      <description>The Milli, Micro, and Nano variants return the number of milliseconds, microseconds, and nanoseconds (respectively) elapsed since the Unix epoch.
.Date.Unix → 1637259694 .ExpiryDate.Unix → 1672559999 .Lastmod.Unix → 1637361786 .PublishDate.Unix → 1637421261 (&amp;#34;1970-01-01T00:00:00-00:00&amp;#34; | time.AsTime).Unix → 0 (&amp;#34;1970-01-01T00:00:42-00:00&amp;#34; | time.AsTime).Unix → 42 (&amp;#34;1970-04-11T01:48:29-08:00&amp;#34; | time.AsTime).Unix → 8675309 (&amp;#34;2026-05-02T20:09:31-07:00&amp;#34; | time.AsTime).Unix → 1777777771 now.Unix → 1637447841 now.UnixMilli → 1637447841347 now.UnixMicro → 1637447841347378 now.UnixNano → 1637447841347378799 </description>
    </item>
    <item>
      <title>urls.AbsLangURL</title>
      <link>https://gohugo.io/functions/urls/abslangurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/abslangurl/</guid>
      <description>Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:
Whether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.
Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.</description>
    </item>
    <item>
      <title>urls.AbsURL</title>
      <link>https://gohugo.io/functions/urls/absurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/absurl/</guid>
      <description>With multilingual configurations, use the absLangURL function instead. The URL returned by this function depends on:
Whether the input begins with a slash The baseURL in site configuration Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.
With baseURL = https://example.org/
{{ absURL &amp;#34;&amp;#34; }} → https://example.org/ {{ absURL &amp;#34;articles&amp;#34; }} → https://example.org/articles {{ absURL &amp;#34;style.</description>
    </item>
    <item>
      <title>collections.After</title>
      <link>https://gohugo.io/functions/collections/after/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/after/</guid>
      <description>The following shows after being used in conjunction with the slicefunction:
{{ $data := slice &amp;#34;one&amp;#34; &amp;#34;two&amp;#34; &amp;#34;three&amp;#34; &amp;#34;four&amp;#34; }} {{ range after 2 $data }} {{ . }} {{ end }} → [&amp;#34;three&amp;#34;, &amp;#34;four&amp;#34;] Example of after with first: 2nd–4th most recent articles You can use after in combination with the first function and Hugo&amp;rsquo;s powerful sorting methods. Let&amp;rsquo;s assume you have a list page at example.com/articles. You have 10 articles, but you want your templating for the list/section page to show only two rows:</description>
    </item>
    <item>
      <title>urls.Anchorize</title>
      <link>https://gohugo.io/functions/urls/anchorize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/anchorize/</guid>
      <description>If Goldmark is set as defaultMarkdownHandler, the sanitizing logic adheres to the setting markup.goldmark.parser.autoHeadingIDType.
Since the defaultMarkdownHandler and this template function use the same sanitizing logic, you can use the latter to determine the ID of a header for linking with anchor tags.
{{ anchorize &amp;#34;This is a header&amp;#34; }} → &amp;#34;this-is-a-header&amp;#34; {{ anchorize &amp;#34;This is also a header&amp;#34; }} → &amp;#34;this-is-also----a-header&amp;#34; {{ anchorize &amp;#34;main.go&amp;#34; }} → &amp;#34;maingo&amp;#34; {{ anchorize &amp;#34;Article 123&amp;#34; }} → &amp;#34;article-123&amp;#34; {{ anchorize &amp;#34;&amp;lt;- Let&amp;#39;s try this, shall we?</description>
    </item>
    <item>
      <title>collections.Append</title>
      <link>https://gohugo.io/functions/collections/append/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/append/</guid>
      <description>This function appends all elements, excluding the last, to the last element. This allows pipe constructs as shown below.
Append a single element to a slice:
{{ $s := slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; }} {{ $s }} → [a b] {{ $s = $s | append &amp;#34;c&amp;#34; }} {{ $s }} → [a b c] Append two elements to a slice:
{{ $s := slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; }} {{ $s }} → [a b] {{ $s = $s | append &amp;#34;c&amp;#34; &amp;#34;d&amp;#34; }} {{ $s }} → [a b c d] Append two elements, as a slice, to a slice.</description>
    </item>
    <item>
      <title>collections.Apply</title>
      <link>https://gohugo.io/functions/collections/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/apply/</guid>
      <description>The apply function takes three or more arguments, depending on the function being applied to the collection elements.
The first argument is the collection itself, the second argument is the function name, and the remaining arguments are passed to the function, with the string &amp;quot;.&amp;quot; representing the collection element.
{{ $s := slice &amp;#34;hello&amp;#34; &amp;#34;world&amp;#34; }} {{ $s = apply $s &amp;#34;strings.FirstUpper&amp;#34; &amp;#34;.&amp;#34; }} {{ $s }} → [Hello World] {{ $s = apply $s &amp;#34;strings.</description>
    </item>
    <item>
      <title>encoding.Base64Decode</title>
      <link>https://gohugo.io/functions/encoding/base64decode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/encoding/base64decode/</guid>
      <description>{{ &amp;#34;SHVnbw==&amp;#34; | base64Decode }} → &amp;#34;Hugo&amp;#34; Use the base64Decode function to decode responses from APIs. For example, the result of this call to GitHub&amp;rsquo;s API contains the base64-encoded representation of the repository&amp;rsquo;s README file:
https://api.github.com/repos/gohugoio/hugo/readme To retrieve and render the content:
{{ $u := &amp;#34;https://api.github.com/repos/gohugoio/hugo/readme&amp;#34; }} {{ with resources.GetRemote $u }} {{ with .Err }} {{ errorf &amp;#34;%s&amp;#34; . }} {{ else }} {{ with . | transform.Unmarshal }} {{ .</description>
    </item>
    <item>
      <title>encoding.Base64Encode</title>
      <link>https://gohugo.io/functions/encoding/base64encode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/encoding/base64encode/</guid>
      <description>{{ &amp;#34;Hugo&amp;#34; | base64Encode }} → &amp;#34;SHVnbw==&amp;#34; </description>
    </item>
    <item>
      <title>chomp</title>
      <link>https://gohugo.io/functions/strings/chomp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/chomp/</guid>
      <description>If the argument is of type template.HTML, returns template.HTML, else returns a string.
Useful in a pipeline to remove newlines added by other processing (e.g., markdownify).
{{ chomp &amp;#34;&amp;lt;p&amp;gt;Blockhead&amp;lt;/p&amp;gt;\n&amp;#34; }} → &amp;#34;&amp;lt;p&amp;gt;Blockhead&amp;lt;/p&amp;gt;&amp;#34; </description>
    </item>
    <item>
      <title>collections.Reverse</title>
      <link>https://gohugo.io/functions/collections/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/reverse/</guid>
      <description>{{ slice 2 1 3 | collections.Reverse }} → [3 1 2] </description>
    </item>
    <item>
      <title>collections.Complement</title>
      <link>https://gohugo.io/functions/collections/complement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/complement/</guid>
      <description>To find the elements within $c3 that do not exist in $c1 or $c2:
{{ $c1 := slice 3 }} {{ $c2 := slice 4 5 }} {{ $c3 := slice 1 2 3 4 5 }} {{ complement $c1 $c2 $c3 }} → [1 2] Make your code simpler to understand by using a chained pipeline:
{{ $c3 | complement $c1 $c2 }} → [1 2] You can also use the complement function with page collections.</description>
    </item>
    <item>
      <title>compare.Conditional</title>
      <link>https://gohugo.io/functions/compare/cond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/cond/</guid>
      <description>The CONTROL argument is a boolean value that indicates whether the function should return ARG1 or ARG2. If CONTROL is true, the function returns ARG1. Otherwise, the function returns ARG2.
{{ $qty := 42 }} {{ cond (le $qty 3) &amp;#34;few&amp;#34; &amp;#34;many&amp;#34; }} → &amp;#34;many&amp;#34; The CONTROL argument must be either true or false. To cast a non-boolean value to boolean, pass it through the not operator twice.
{{ cond (42 | not | not) &amp;#34;truthy&amp;#34; &amp;#34;falsy&amp;#34; }} → &amp;#34;truthy&amp;#34; {{ cond (&amp;#34;&amp;#34; | not | not) &amp;#34;truthy&amp;#34; &amp;#34;falsy&amp;#34; }} → &amp;#34;falsy&amp;#34; Unlike ternary operators in other languages, the cond function does not perform short-circuit evaluation.</description>
    </item>
    <item>
      <title>strings.CountRunes</title>
      <link>https://gohugo.io/functions/strings/countrunes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/countrunes/</guid>
      <description>In contrast with the strings.RuneCount function, which counts every rune in a string, strings.CountRunes excludes whitespace.
{{ &amp;#34;Hello, 世界&amp;#34; | strings.CountRunes }} → 8 </description>
    </item>
    <item>
      <title>strings.CountWords</title>
      <link>https://gohugo.io/functions/strings/countwords/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/countwords/</guid>
      <description>The template function works similar to the .WordCount page variable.
{{ &amp;#34;Hugo is a static site generator.&amp;#34; | countwords }} &amp;lt;!-- outputs a content length of 6 words. --&amp;gt; </description>
    </item>
    <item>
      <title>crypto.FNV32a</title>
      <link>https://gohugo.io/functions/crypto/fnv32a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/crypto/fnv32a/</guid>
      <description>This function calculates the 32 bit FNV1a hash of a given string according to the specification:
{{ crypto.FNV32a &amp;#34;Hello world&amp;#34; }} → 1498229191 </description>
    </item>
    <item>
      <title>debug.Dump</title>
      <link>https://gohugo.io/functions/debug/dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/debug/dump/</guid>
      <description>{{ $data := &amp;#34;&amp;#34; }} {{ $p := &amp;#34;data/books.json&amp;#34; }} {{ with resources.Get $p }} {{ $opts := dict &amp;#34;delimiter&amp;#34; &amp;#34;,&amp;#34; }} {{ $data = . | transform.Unmarshal $opts }} {{ else }} {{ errorf &amp;#34;Unable to get resource %q&amp;#34; $p }} {{ end }} &amp;lt;pre&amp;gt;{{ debug.Dump $data }}&amp;lt;/pre&amp;gt; []interface {}{ map[string]interface {}{ &amp;#34;author&amp;#34;: &amp;#34;Victor Hugo&amp;#34;, &amp;#34;rating&amp;#34;: 5.0, &amp;#34;title&amp;#34;: &amp;#34;Les Misérables&amp;#34;, }, map[string]interface {}{ &amp;#34;author&amp;#34;: &amp;#34;Victor Hugo&amp;#34;, &amp;#34;rating&amp;#34;: 4.0, &amp;#34;title&amp;#34;: &amp;#34;The Hunchback of Notre Dame&amp;#34;, }, } Output from this function may change from one release to the next.</description>
    </item>
    <item>
      <title>compare.Default</title>
      <link>https://gohugo.io/functions/compare/default/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/default/</guid>
      <description>default checks whether a given value is set and returns a default value if it is not. Set in this context means different things depending on the data type:
non-zero for numeric types and times non-zero length for strings, arrays, slices, and maps any boolean or struct value non-nil for any other types default function examples reference the following content page:
content/posts/default-function-example.md --- title: Sane Defaults seo_title: date: 2017-02-18 font: oldparam: The default function helps make your templating DRYer.</description>
    </item>
    <item>
      <title>collections.Delimit</title>
      <link>https://gohugo.io/functions/collections/delimit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/delimit/</guid>
      <description>Delimit a slice:
{{ $s := slice &amp;#34;b&amp;#34; &amp;#34;a&amp;#34; &amp;#34;c&amp;#34; }} {{ delimit $s &amp;#34;, &amp;#34; }} → &amp;#34;b, a, c&amp;#34; {{ delimit $s &amp;#34;, &amp;#34; &amp;#34; and &amp;#34;}} → &amp;#34;b, a and c&amp;#34; Delimit a map:
The delimit function sorts maps by key, returning the values.
{{ $m := dict &amp;#34;b&amp;#34; 2 &amp;#34;a&amp;#34; 1 &amp;#34;c&amp;#34; 3 }} {{ delimit $m &amp;#34;, &amp;#34; }} → &amp;#34;1, 2, 3&amp;#34; {{ delimit $m &amp;#34;, &amp;#34; &amp;#34; and &amp;#34;}} → &amp;#34;1, 2 and 3&amp;#34; </description>
    </item>
    <item>
      <title>collections.Dictionary</title>
      <link>https://gohugo.io/functions/collections/dictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/dictionary/</guid>
      <description>dict is especially useful for passing more than one value to a partial template.
Note that the key can be either a string or a string slice. The latter is useful to create a deeply nested structure, e.g.:
{{ $m := dict (slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;) &amp;#34;value&amp;#34; }} Example: using dict to pass multiple values to a partial The partial below creates an SVG and expects fill, height and width from the caller:</description>
    </item>
    <item>
      <title>time.Duration</title>
      <link>https://gohugo.io/functions/time/duration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/time/duration/</guid>
      <description>time.Duration converts a given number into a time.Duration structure so you can access its fields. E.g. you can perform time operations on the returned time.Duration value:
{{ printf &amp;#34;There are %.0f seconds in one day.&amp;#34; (duration &amp;#34;hour&amp;#34; 24).Seconds }} &amp;lt;!-- Output: There are 86400 seconds in one day. --&amp;gt; Make your code simpler to understand by using a chained pipeline:
{{ mul 7.75 60 | duration &amp;#34;minute&amp;#34; }} → 7h45m0s {{ mul 120 60 | mul 1000 | duration &amp;#34;millisecond&amp;#34; }} → 2h0m0s You have to specify a time unit for the number given to the function.</description>
    </item>
    <item>
      <title>collections.EchoParam</title>
      <link>https://gohugo.io/functions/collections/echoparam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/echoparam/</guid>
      <description>For example, consider this site configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; params: footer: poweredBy: Hugo [params] [params.footer] poweredBy = &amp;#39;Hugo&amp;#39; { &amp;#34;params&amp;#34;: { &amp;#34;footer&amp;#34;: { &amp;#34;poweredBy&amp;#34;: &amp;#34;Hugo&amp;#34; } } } To print the value of poweredBy:
{{ echoParam site.Params.footer &amp;#34;poweredby&amp;#34; }} → Hugo When using the echoParam function you must reference the key using lower case. See the previous example.
The echoParam function will be deprecated in a future release.</description>
    </item>
    <item>
      <title>transform.Emojify</title>
      <link>https://gohugo.io/functions/transform/emojify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/emojify/</guid>
      <description>emojify runs a passed string through the Emoji emoticons processor.
See the Emoji cheat sheet for available emoticons.
The emojify function can be called in your templates but not directly in your content files by default. For emojis in content files, set enableEmoji to true in your site&amp;rsquo;s configuration. Then you can write emoji shorthand directly into your content files; e.g. I :heart: Hugo!:
I &amp;#x2764;&amp;#xfe0f; Hugo!</description>
    </item>
    <item>
      <title>compare.Eq</title>
      <link>https://gohugo.io/functions/compare/eq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/eq/</guid>
      <description>{{ eq 1 1 }} → true {{ eq 1 2 }} → false {{ eq 1 1 1 }} → true {{ eq 1 1 2 }} → true {{ eq 1 2 1 }} → true {{ eq 1 2 2 }} → false </description>
    </item>
    <item>
      <title>fmt.Errorf</title>
      <link>https://gohugo.io/functions/fmt/errorf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/errorf/</guid>
      <description>The documentation for Go&amp;rsquo;s fmt package describes the structure and content of the format string.
Like the printf function, the errorf function evaluates the format string. It then prints the result to the ERROR log and fails the build. Hugo prints each unique message once to avoid flooding the log with duplicate errors.
{{ errorf &amp;#34;The %q shortcode requires a src parameter. See %s&amp;#34; .Name .Position }} Use the erroridf function to allow optional suppression of specific errors.</description>
    </item>
    <item>
      <title>fmt.Erroridf</title>
      <link>https://gohugo.io/functions/fmt/erroridf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/erroridf/</guid>
      <description>The documentation for Go&amp;rsquo;s fmt package describes the structure and content of the format string.
Like the errorf function, the erroridf function evaluates the format string, prints the result to the ERROR log, then fails the build. Hugo prints each unique message once to avoid flooding the log with duplicate errors.
Unlike the errorf function, you may suppress errors logged by the erroridf function by adding the message ID to the ignoreErrors array in your site configuration.</description>
    </item>
    <item>
      <title>os.FileExists</title>
      <link>https://gohugo.io/functions/os/fileexists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/os/fileexists/</guid>
      <description>The os.FileExists function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.
With this directory structure:
content/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md The function returns these values:
{{ os.FileExists &amp;#34;content&amp;#34; }} → true {{ os.</description>
    </item>
    <item>
      <title>strings.FindRE</title>
      <link>https://gohugo.io/functions/strings/findre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/findre/</guid>
      <description>By default, findRE finds all matches. You can limit the number of matches with an optional LIMIT argument.
When specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.
Go&amp;rsquo;s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.</description>
    </item>
    <item>
      <title>strings.FindRESubmatch</title>
      <link>https://gohugo.io/functions/strings/findresubmatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/findresubmatch/</guid>
      <description>By default, findRESubmatch finds all matches. You can limit the number of matches with an optional LIMIT argument. A return value of nil indicates no match.
When specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.
Go&amp;rsquo;s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.</description>
    </item>
    <item>
      <title>collections.First</title>
      <link>https://gohugo.io/functions/collections/first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/first/</guid>
      <description>first works in a similar manner to the limit keyword in SQL. It reduces the array to only the first N elements. It takes the array and number of elements as input.
first takes two arguments:
number of elements array or slice of maps or structs layout/_default/section.html {{ range first 10 .Pages }} {{ .Render &amp;#34;summary&amp;#34; }} {{ end }} Note: Exclusive to first, LIMIT can be &amp;lsquo;0&amp;rsquo; to return an empty array.</description>
    </item>
    <item>
      <title>cast.ToFloat</title>
      <link>https://gohugo.io/functions/cast/tofloat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/cast/tofloat/</guid>
      <description>With a decimal (base 10) input:
{{ float 11 }} → 11 (float64) {{ float &amp;#34;11&amp;#34; }} → 11 (float64) {{ float 11.1 }} → 11.1 (float64) {{ float &amp;#34;11.1&amp;#34; }} → 11.1 (float64) {{ float 11.9 }} → 11.9 (float64) {{ float &amp;#34;11.9&amp;#34; }} → 11.9 (float64) With a binary (base 2) input:
{{ float 0b11 }} → 3 (float64) With an octal (base 8) input (use either notation):</description>
    </item>
    <item>
      <title>compare.Ge</title>
      <link>https://gohugo.io/functions/compare/ge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/ge/</guid>
      <description>{{ ge 1 1 }} → true {{ ge 1 2 }} → false {{ ge 2 1 }} → true {{ ge 1 1 1 }} → true {{ ge 1 1 2 }} → false {{ ge 1 2 1 }} → false {{ ge 1 2 2 }} → false {{ ge 2 1 1 }} → true {{ ge 2 1 2 }} → true {{ ge 2 2 1 }} → true </description>
    </item>
    <item>
      <title>data.GetCSV</title>
      <link>https://gohugo.io/functions/data/getcsv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/data/getcsv/</guid>
      <description>Given the following directory structure:
my-project/ └── other-files/ └── pets.csv Access the data with either of the following:
{{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;other-files/pets.csv&amp;#34; }} {{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;other-files/&amp;#34; &amp;#34;pets.csv&amp;#34; }} Access remote data with either of the following:
{{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;https://example.org/pets.csv&amp;#34; }} {{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;https://example.org/&amp;#34; &amp;#34;pets.csv&amp;#34; }} The resulting data structure is an array of arrays:
[ [&amp;#34;name&amp;#34;,&amp;#34;type&amp;#34;,&amp;#34;breed&amp;#34;,&amp;#34;age&amp;#34;], [&amp;#34;Spot&amp;#34;,&amp;#34;dog&amp;#34;,&amp;#34;Collie&amp;#34;,&amp;#34;3&amp;#34;], [&amp;#34;Felix&amp;#34;,&amp;#34;cat&amp;#34;,&amp;#34;Malicious&amp;#34;,&amp;#34;7&amp;#34;] ] Global resource alternative Consider using resources.</description>
    </item>
    <item>
      <title>os.Getenv</title>
      <link>https://gohugo.io/functions/os/getenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/os/getenv/</guid>
      <description>Examples:
{{ os.Getenv &amp;#34;HOME&amp;#34; }} → /home/victor {{ os.Getenv &amp;#34;USER&amp;#34; }} → victor You can pass values when building your site:
MY_VAR1=foo MY_VAR2=bar hugo OR export MY_VAR1=foo export MY_VAR2=bar hugo And then retrieve the values within a template:
{{ os.Getenv &amp;#34;MY_VAR1&amp;#34; }} → foo {{ os.Getenv &amp;#34;MY_VAR2&amp;#34; }} → bar With Hugo v0.91.0 and later, you must explicitly allow access to environment variables. For details, review Hugo&amp;rsquo;s Security Policy. By default, environment variables beginning with HUGO_ are allowed when using the os.</description>
    </item>
    <item>
      <title>data.GetJSON</title>
      <link>https://gohugo.io/functions/data/getjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/data/getjson/</guid>
      <description>Given the following directory structure:
my-project/ └── other-files/ └── books.json Access the data with either of the following:
{{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;other-files/books.json&amp;#34; }} {{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;other-files/&amp;#34; &amp;#34;books.json&amp;#34; }} Access remote data with either of the following:
{{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;https://example.org/books.json&amp;#34; }} {{ $data := getCSV &amp;#34;,&amp;#34; &amp;#34;https://example.org/&amp;#34; &amp;#34;books.json&amp;#34; }} The resulting data structure is a JSON object:
[ { &amp;#34;author&amp;#34;: &amp;#34;Victor Hugo&amp;#34;, &amp;#34;rating&amp;#34;: 5, &amp;#34;title&amp;#34;: &amp;#34;Les Misérables&amp;#34; }, { &amp;#34;author&amp;#34;: &amp;#34;Victor Hugo&amp;#34;, &amp;#34;rating&amp;#34;: 4, &amp;#34;title&amp;#34;: &amp;#34;The Hunchback of Notre Dame&amp;#34; } ] Global resource alternative Consider using resources.</description>
    </item>
    <item>
      <title>collections.Group</title>
      <link>https://gohugo.io/functions/collections/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/group/</guid>
      <description>layouts/partials/groups.html {{ $new := .Site.RegularPages | first 10 | group &amp;#34;New&amp;#34; }} {{ $old := .Site.RegularPages | last 10 | group &amp;#34;Old&amp;#34; }} {{ $groups := slice $new $old }} {{ range $groups }} &amp;lt;h3&amp;gt;{{ .Key }}{{/* Prints &amp;#34;New&amp;#34;, &amp;#34;Old&amp;#34; */}}&amp;lt;/h3&amp;gt; &amp;lt;ul&amp;gt; {{ range .Pages }} &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt; &amp;lt;div class=&amp;#34;meta&amp;#34;&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; {{ end }} &amp;lt;/ul&amp;gt; {{ end }} The page group you get from group is of the same type you get from the built-in group methods in Hugo.</description>
    </item>
    <item>
      <title>compare.Gt</title>
      <link>https://gohugo.io/functions/compare/gt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/gt/</guid>
      <description>{{ gt 1 1 }} → false {{ gt 1 2 }} → false {{ gt 2 1 }} → true {{ gt 1 1 1 }} → false {{ gt 1 1 2 }} → false {{ gt 1 2 1 }} → false {{ gt 1 2 2 }} → false {{ gt 2 1 1 }} → true {{ gt 2 1 2 }} → false {{ gt 2 2 1 }} → false </description>
    </item>
    <item>
      <title>transform.Highlight</title>
      <link>https://gohugo.io/functions/transform/highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/highlight/</guid>
      <description>The highlight function uses the Chroma syntax highlighter, supporting over 200 languages with more than 40 available styles.
Arguments INPUT The code to highlight. LANG The language of the code to highlight. Choose from one of the supported languages. Case-insensitive. OPTIONS An optional, comma-separated list of zero or more options. Set default values in site configuration. Options lineNos Boolean. Default is false.
Display a number at the beginning of each line.</description>
    </item>
    <item>
      <title>crypto.HMAC</title>
      <link>https://gohugo.io/functions/crypto/hmac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/crypto/hmac/</guid>
      <description>Set the HASH_TYPE argument to md5, sha1, sha256, or sha512.
Set the optional ENCODING argument to either hex (default) or binary.
{{ hmac &amp;#34;sha256&amp;#34; &amp;#34;Secret key&amp;#34; &amp;#34;Secret message&amp;#34; }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac &amp;#34;sha256&amp;#34; &amp;#34;Secret key&amp;#34; &amp;#34;Secret message&amp;#34; &amp;#34;hex&amp;#34; }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac &amp;#34;sha256&amp;#34; &amp;#34;Secret key&amp;#34; &amp;#34;Secret message&amp;#34; &amp;#34;binary&amp;#34; | base64Encode }} XM60kfRfixVOIPOwow7Tpv8wJ9Nz+Fx4/+iYMYCwPIQ= </description>
    </item>
    <item>
      <title>transform.HTMLEscape</title>
      <link>https://gohugo.io/functions/transform/htmlescape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/htmlescape/</guid>
      <description>In the result &amp;amp; becomes &amp;amp;amp; and so on. It escapes only: &amp;lt;, &amp;gt;, &amp;amp;, &#39; and &amp;quot;.
{{ htmlEscape &amp;#34;Hugo &amp;amp; Caddy &amp;gt; WordPress &amp;amp; Apache&amp;#34; }} → &amp;#34;Hugo &amp;amp;amp; Caddy &amp;amp;gt; WordPress &amp;amp;amp; Apache&amp;#34; </description>
    </item>
    <item>
      <title>transform.HTMLUnescape</title>
      <link>https://gohugo.io/functions/transform/htmlunescape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/htmlunescape/</guid>
      <description>Remember to pass the output of this to safeHTML if fully un-escaped characters are desired. Otherwise, the output will be escaped again as normal.
{{ htmlUnescape &amp;#34;Hugo &amp;amp;amp; Caddy &amp;amp;gt; WordPress &amp;amp;amp; Apache&amp;#34; }} → &amp;#34;Hugo &amp;amp; Caddy &amp;gt; WordPress &amp;amp; Apache&amp;#34; </description>
    </item>
    <item>
      <title>hugo</title>
      <link>https://gohugo.io/functions/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/hugo/</guid>
      <description>hugo returns an instance that contains the following functions:
hugo.BuildDate (string) The compile date of the current Hugo binary formatted per RFC 3339 (e.g., 2023-05-23T08:14:20Z). hugo.CommitHash (string) The Git commit hash of the Hugo binary (e.g., 0a95d6704a8ac8d41cc5ca8fffaad8c5c7a3754a). hugo.Deps ([]*hugo.Dependency) See hugo.Deps. hugo.Environment (string) The current running environment as defined through the --environment CLI flag (e.g., development, production). hugo.Generator (template.HTML) Renders an HTML meta element identifying the software that generated the site (e.</description>
    </item>
    <item>
      <title>inflect.Humanize</title>
      <link>https://gohugo.io/functions/inflect/humanize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/inflect/humanize/</guid>
      <description>If the input is either an int64 value or the string representation of an integer, humanize returns the number with the proper ordinal appended.
{{ humanize &amp;#34;my-first-post&amp;#34; }} → &amp;#34;My first post&amp;#34; {{ humanize &amp;#34;myCamelPost&amp;#34; }} → &amp;#34;My camel post&amp;#34; {{ humanize &amp;#34;52&amp;#34; }} → &amp;#34;52nd&amp;#34; {{ humanize 103 }} → &amp;#34;103rd&amp;#34; </description>
    </item>
    <item>
      <title>lang.Translate</title>
      <link>https://gohugo.io/functions/lang/translate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/translate/</guid>
      <description>Let&amp;rsquo;s say your multilingual site supports two languages, English and Polish. Create a translation table for each language in the i18n directory.
i18n/ ├── en.toml └── pl.toml The translation tables can contain both:
Simple translations Translations with pluralization The Unicode CLDR Plural Rules chart describes the pluralization categories for each language.
The English translation table:
i18n/en. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; day: one: day other: days day_with_count: one: &amp;#39;{{ .</description>
    </item>
    <item>
      <title>Image filters</title>
      <link>https://gohugo.io/functions/images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/images/</guid>
      <description>See images.Filter for how to apply these filters to an image.
Process New in v0.119.0 Syntax images.Process SRC SPEC A general purpose image processing function.
This filter has all the same options as the Process method, but using it as a filter may be more effective if you need to apply multiple filters to an image:
{{ $filters := slice images.Grayscale (images.GaussianBlur 8) (images.Process &amp;#34;resize 200x jpg q30&amp;#34;) }} {{ $img = $img | images.</description>
    </item>
    <item>
      <title>collections.Index</title>
      <link>https://gohugo.io/functions/collections/indexfunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/indexfunction/</guid>
      <description>The index functions returns the result of indexing its first argument by the following arguments. Each indexed item must be a map or a slice, e.g.:
{{ $slice := slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34; }} {{ index $slice 1 }} =&amp;gt; b {{ $map := dict &amp;#34;a&amp;#34; 100 &amp;#34;b&amp;#34; 200 }} {{ index $map &amp;#34;b&amp;#34; }} =&amp;gt; 200 The function takes multiple indices as arguments, and this can be used to get nested values, e.</description>
    </item>
    <item>
      <title>cast.ToInt</title>
      <link>https://gohugo.io/functions/cast/toint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/cast/toint/</guid>
      <description>With a decimal (base 10) input:
{{ int 11 }} → 11 (int) {{ int &amp;#34;11&amp;#34; }} → 11 (int) {{ int 11.1 }} → 11 (int) {{ int 11.9 }} → 11 (int) With a binary (base 2) input:
{{ int 0b11 }} → 3 (int) {{ int &amp;#34;0b11&amp;#34; }} → 3 (int) With an octal (base 8) input (use either notation):
{{ int 011 }} → 9 (int) {{ int &amp;#34;011&amp;#34; }} → 9 (int) {{ int 0o11 }} → 9 (int) {{ int &amp;#34;0o11&amp;#34; }} → 9 (int) With a hexadecimal (base 16) input:</description>
    </item>
    <item>
      <title>collections.Intersect</title>
      <link>https://gohugo.io/functions/collections/intersect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/intersect/</guid>
      <description>A useful example is to use it as AND filters when combined with where:
AND filter in where query {{ $pages := where .Site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;not in&amp;#34; (slice &amp;#34;page&amp;#34; &amp;#34;about&amp;#34;) }} {{ $pages := $pages | union (where .Site.RegularPages &amp;#34;Params.pinned&amp;#34; true) }} {{ $pages := $pages | intersect (where .Site.RegularPages &amp;#34;Params.images&amp;#34; &amp;#34;!=&amp;#34; nil) }} The above fetches regular pages not of page or about type unless they are pinned. And finally, we exclude all pages with no images set in Page parameters.</description>
    </item>
    <item>
      <title>collections.IsSet</title>
      <link>https://gohugo.io/functions/collections/isset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/isset/</guid>
      <description>For example, consider this site configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; params: showHeroImage: false [params] showHeroImage = false { &amp;#34;params&amp;#34;: { &amp;#34;showHeroImage&amp;#34;: false } } It the value of showHeroImage is true, we can detect that it exists using either if or with:
{{ if site.Params.showHeroImage }} {{ site.Params.showHeroImage }} → true {{ end }} {{ with site.Params.showHeroImage }} {{ . }} → true {{ end }} But if the value of showHeroImage is false, we can&amp;rsquo;t use either if or with to detect its existence.</description>
    </item>
    <item>
      <title>encoding.Jsonify</title>
      <link>https://gohugo.io/functions/encoding/jsonify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/encoding/jsonify/</guid>
      <description>To customize the printing of the JSON, pass a map of options as the first argument. Supported options are &amp;ldquo;prefix&amp;rdquo; and &amp;ldquo;indent&amp;rdquo;. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.
{{ dict &amp;#34;title&amp;#34; .Title &amp;#34;content&amp;#34; .Plain | jsonify }} {{ dict &amp;#34;title&amp;#34; .Title &amp;#34;content&amp;#34; .Plain | jsonify (dict &amp;#34;indent&amp;#34; &amp;#34; &amp;#34;) }} {{ dict &amp;#34;title&amp;#34; .</description>
    </item>
    <item>
      <title>collections.KeyVals</title>
      <link>https://gohugo.io/functions/collections/keyvals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/keyvals/</guid>
      <description>The primary application for this function is the definition of the namedSlices parameter in the options map passed to the .Related method on the Page object.
See related content.
{{ $kv := keyVals &amp;#34;foo&amp;#34; &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34; }} The resulting data structure is:
{ &amp;#34;Key&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;Values&amp;#34;: [ &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; ] } To extract the key and values:
{{ $kv.Key }} → foo {{ $kv.Values }} → [a b c] </description>
    </item>
    <item>
      <title>lang.FormatAccounting</title>
      <link>https://gohugo.io/functions/lang/formataccounting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/formataccounting/</guid>
      <description>{{ 512.5032 | lang.FormatAccounting 2 &amp;#34;NOK&amp;#34; }} → NOK512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.</description>
    </item>
    <item>
      <title>lang.FormatCurrency</title>
      <link>https://gohugo.io/functions/lang/formatcurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/formatcurrency/</guid>
      <description>{{ 512.5032 | lang.FormatCurrency 2 &amp;#34;USD&amp;#34; }} → $512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.</description>
    </item>
    <item>
      <title>lang.FormatNumber</title>
      <link>https://gohugo.io/functions/lang/formatnumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/formatnumber/</guid>
      <description>{{ 512.5032 | lang.FormatNumber 2 }} → 512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.</description>
    </item>
    <item>
      <title>lang.FormatNumberCustom</title>
      <link>https://gohugo.io/functions/lang/formatnumbercustom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/formatnumbercustom/</guid>
      <description>This function formats a number with the given precision. The first options parameter is a space-delimited string of characters to represent negativity, the decimal point, and grouping. The default value is - . ,. The second options parameter defines an alternate delimiting character.
Note that numbers are rounded up at 5 or greater. So, with precision set to 0, 1.5 becomes 2, and 1.4 becomes 1.
For a simpler function that adapts to the current language, see lang.</description>
    </item>
    <item>
      <title>lang.FormatPercent</title>
      <link>https://gohugo.io/functions/lang/formatpercent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/formatpercent/</guid>
      <description>{{ 512.5032 | lang.FormatPercent 2 }} → 512.50% Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.</description>
    </item>
    <item>
      <title>lang.Merge</title>
      <link>https://gohugo.io/functions/lang/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/lang/merge/</guid>
      <description>As an example:
{{ $pages := .Site.RegularPages | lang.Merge $frSite.RegularPages | lang.Merge $enSite.RegularPages }} Will &amp;ldquo;fill in the gaps&amp;rdquo; in the current site with, from left to right, content from the French site, and lastly the English.
A more practical example is to fill in the missing translations from the other languages:
{{ $pages := .Site.RegularPages }} {{ range .Site.Home.Translations }} {{ $pages = $pages | lang.Merge .Site.RegularPages }} {{ end }} </description>
    </item>
    <item>
      <title>collections.Last</title>
      <link>https://gohugo.io/functions/collections/last/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/last/</guid>
      <description>{{ range last 10 .Pages }} {{ .Render &amp;#34;summary&amp;#34; }} {{ end }} </description>
    </item>
    <item>
      <title>compare.Le</title>
      <link>https://gohugo.io/functions/compare/le/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/le/</guid>
      <description>{{ le 1 1 }} → true {{ le 1 2 }} → true {{ le 2 1 }} → false {{ le 1 1 1 }} → true {{ le 1 1 2 }} → true {{ le 1 2 1 }} → true {{ le 1 2 2 }} → true {{ le 2 1 1 }} → false {{ le 2 1 2 }} → false {{ le 2 2 1 }} → false </description>
    </item>
    <item>
      <title>len</title>
      <link>https://gohugo.io/functions/go-template/len/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/go-template/len/</guid>
      <description>See Go&amp;rsquo;s text/template documentation for more details.
With a string:
{{ &amp;#34;ab&amp;#34; | len }} → 2 {{ &amp;#34;&amp;#34; | len }} → 0 With a slice:
{{ slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; | len }} → 2 {{ slice | len }} → 0 With a map:
{{ dict &amp;#34;a&amp;#34; 1 &amp;#34;b&amp;#34; 2 | len }} → 2 {{ dict | len }} → 0 With a collection:
{{ site.RegularPages | len }} → 42 You may also determine the number of pages in a collection with:</description>
    </item>
    <item>
      <title>strings.ToLower</title>
      <link>https://gohugo.io/functions/strings/tolower/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/tolower/</guid>
      <description>Note that lower can be applied in your templates in more than one way:
{{ lower &amp;#34;BatMan&amp;#34; }} → &amp;#34;batman&amp;#34; {{ &amp;#34;BatMan&amp;#34; | lower }} → &amp;#34;batman&amp;#34; </description>
    </item>
    <item>
      <title>compare.Lt</title>
      <link>https://gohugo.io/functions/compare/lt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/lt/</guid>
      <description>{{ lt 1 1 }} → false {{ lt 1 2 }} → true {{ lt 2 1 }} → false {{ lt 1 1 1 }} → false {{ lt 1 1 2 }} → false {{ lt 1 2 1 }} → false {{ lt 1 2 2 }} → true {{ lt 2 1 1 }} → false {{ lt 2 1 2 }} → false {{ lt 2 2 1 }} → false </description>
    </item>
    <item>
      <title>transform.Markdownify</title>
      <link>https://gohugo.io/functions/transform/markdownify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/markdownify/</guid>
      <description>{{ .Title | markdownify }} If the resulting HTML is a single paragraph, Hugo removes the wrapping p tags to produce inline HTML as required per the example above.
To keep the wrapping p tags for a single paragraph, use the .Page.RenderString method, setting the display option to block.
If the resulting HTML is two or more paragraphs, Hugo leaves the wrapping p tags in place.
Although the markdownify function honors markdown render hooks when rendering markdown to HTML, use the .</description>
    </item>
    <item>
      <title>math</title>
      <link>https://gohugo.io/functions/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/math/</guid>
      <description>Function Description Example add Adds two or more numbers. {{ add 12 3 2 }} → 17 If one of the numbers is a float, the result is a float. {{ add 1.1 2 }} → 3.1 sub Subtracts one or more numbers from the first number. {{ sub 12 3 2 }} → 7 If one of the numbers is a float, the result is a float. {{ sub 3 2.</description>
    </item>
    <item>
      <title>crypto.MD5</title>
      <link>https://gohugo.io/functions/crypto/md5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/crypto/md5/</guid>
      <description>{{ md5 &amp;#34;Hello world&amp;#34; }} → 3e25960a79dbc69b674cd4ec67a72c62 This can be useful if you want to use Gravatar for generating a unique avatar:
&amp;lt;img src=&amp;#34;https://www.gravatar.com/avatar/{{ md5 &amp;#34;your@email.com&amp;#34; }}?s=100&amp;amp;d=identicon&amp;#34;&amp;gt; </description>
    </item>
    <item>
      <title>collections.Merge</title>
      <link>https://gohugo.io/functions/collections/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/merge/</guid>
      <description>Returns the result of merging two or more maps from left to right. If a key already exists, merge updates its value. If a key is absent, merge inserts the value under the new key.
Key handling is case-insensitive.
The following examples use these map definitions:
{{ $m1 := dict &amp;#34;x&amp;#34; &amp;#34;foo&amp;#34; }} {{ $m2 := dict &amp;#34;x&amp;#34; &amp;#34;bar&amp;#34; &amp;#34;y&amp;#34; &amp;#34;wibble&amp;#34; }} {{ $m3 := dict &amp;#34;x&amp;#34; &amp;#34;baz&amp;#34; &amp;#34;y&amp;#34; &amp;#34;wobble&amp;#34; &amp;#34;z&amp;#34; (dict &amp;#34;a&amp;#34; &amp;#34;huey&amp;#34;) }} Example 1</description>
    </item>
    <item>
      <title>compare.Ne</title>
      <link>https://gohugo.io/functions/compare/ne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/compare/ne/</guid>
      <description>{{ ne 1 1 }} → false {{ ne 1 2 }} → true {{ ne 1 1 1 }} → false {{ ne 1 1 2 }} → false {{ ne 1 2 1 }} → false {{ ne 1 2 2 }} → true </description>
    </item>
    <item>
      <title>collections.NewScratch</title>
      <link>https://gohugo.io/functions/collections/newscratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/newscratch/</guid>
      <description>{{ $scratch := newScratch }} {{ $scratch.Add &amp;#34;b&amp;#34; 2 }} {{ $scratch.Add &amp;#34;b&amp;#34; 2 }} {{ $scratch.Get &amp;#34;b&amp;#34; }} → 4 </description>
    </item>
    <item>
      <title>time.Now</title>
      <link>https://gohugo.io/functions/time/now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/time/now/</guid>
      <description>See time.Time.
For example, building your site on June 24, 2017, with the following templating:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; {{ now.Format &amp;#34;2006&amp;#34; }}&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt; would produce the following:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; 2017&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt; The above example uses the .Format function, which page includes a full listing of date formatting using Go&amp;rsquo;s layout string.
Older Hugo themes may still be using the obsolete Page’s .Now (uppercase with leading dot), which causes build error that looks like the following:</description>
    </item>
    <item>
      <title>os.Stat</title>
      <link>https://gohugo.io/functions/os/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/os/stat/</guid>
      <description>The os.Stat function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.
{{ $f := os.Stat &amp;#34;README.md&amp;#34; }} {{ $f.IsDir }} → false (bool) {{ $f.ModTime }} → 2021-11-25 10:06:49.315429236 -0800 PST (time.Time) {{ $f.Name }} → README.md (string) {{ $f.</description>
    </item>
    <item>
      <title>page</title>
      <link>https://gohugo.io/functions/page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/page/</guid>
      <description>At the top level of a template that receives the Page object in context, these are equivalent:
{{ .Params.foo }} {{ .Page.Params.foo }} {{ page.Params.foo }} When the Page object is not in context, you can use the global page function:
{{ page.Params.foo }} Do not use the global page function in shortcodes, partials called by shortcodes, or cached partials. See warnings below.
Explanation Hugo almost always passes a Page as the data context into the top level template (e.</description>
    </item>
    <item>
      <title>partials.Include</title>
      <link>https://gohugo.io/functions/partials/include/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/partials/include/</guid>
      <description>In this example we have three partial templates:
layouts/ └── partials/ ├── average.html ├── breadcrumbs.html └── footer.html The &amp;ldquo;average&amp;rdquo; partial returns the average of one or more numbers. We pass the numbers in context:
{{ $numbers := slice 1 6 7 42 }} {{ $average := partial &amp;#34;average.html&amp;#34; $numbers }} The &amp;ldquo;breadcrumbs&amp;rdquo; partial renders breadcrumb navigation, and needs to receive the current page in context:
{{ partial &amp;#34;breadcrumbs.html&amp;#34; . }} The &amp;ldquo;footer&amp;rdquo; partial renders the site footer.</description>
    </item>
    <item>
      <title>partials.IncludeCached</title>
      <link>https://gohugo.io/functions/partials/includecached/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/partials/includecached/</guid>
      <description>The partialCached template function can offer significant performance gains for complex templates that don&amp;rsquo;t need to be re-rendered on every invocation.
Note: Each Site (or language) has its own partialCached cache, so each site will execute a partial once.
Note: Hugo renders pages in parallel, and will render the partial more than once with concurrent calls to the partialCached function. After Hugo caches the rendered partial, new pages entering the build pipeline will use the cached result.</description>
    </item>
    <item>
      <title>path.Base</title>
      <link>https://gohugo.io/functions/path/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/base/</guid>
      <description>path.Base returns the last element of PATH.
If PATH is empty, . is returned.
Note: On Windows, PATH is converted to slash (/) separators.
{{ path.Base &amp;#34;a/news.html&amp;#34; }} → &amp;#34;news.html&amp;#34; {{ path.Base &amp;#34;news.html&amp;#34; }} → &amp;#34;news.html&amp;#34; {{ path.Base &amp;#34;a/b/c&amp;#34; }} → &amp;#34;c&amp;#34; {{ path.Base &amp;#34;/x/y/z/&amp;#34; }} → &amp;#34;z&amp;#34; </description>
    </item>
    <item>
      <title>path.BaseName</title>
      <link>https://gohugo.io/functions/path/basename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/basename/</guid>
      <description>If PATH is empty, . is returned.
Note: On Windows, PATH is converted to slash (/) separators.
{{ path.BaseName &amp;#34;a/news.html&amp;#34; }} → &amp;#34;news&amp;#34; {{ path.BaseName &amp;#34;news.html&amp;#34; }} → &amp;#34;news&amp;#34; {{ path.BaseName &amp;#34;a/b/c&amp;#34; }} → &amp;#34;c&amp;#34; {{ path.BaseName &amp;#34;/x/y/z/&amp;#34; }} → &amp;#34;z&amp;#34; </description>
    </item>
    <item>
      <title>path.Clean</title>
      <link>https://gohugo.io/functions/path/clean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/clean/</guid>
      <description>path.Clean replaces path separators with slashes (/) and removes extraneous separators, including trailing separators.
{{ path.Clean &amp;#34;foo//bar&amp;#34; }} → &amp;#34;foo/bar&amp;#34; {{ path.Clean &amp;#34;/foo/bar/&amp;#34; }} → &amp;#34;/foo/bar&amp;#34; On a Windows system, if .File.Path is foo\bar.md, then:
{{ path.Clean .File.Path }} → &amp;#34;foo/bar.md&amp;#34; </description>
    </item>
    <item>
      <title>path.Dir</title>
      <link>https://gohugo.io/functions/path/dir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/dir/</guid>
      <description>path.Dir returns all but the last element of PATH, typically PATH&amp;rsquo;s directory.
The returned path will never end in a slash. If PATH is empty, . is returned.
Note: On Windows, PATH is converted to slash (/) separators.
{{ path.Dir &amp;#34;a/news.html&amp;#34; }} → &amp;#34;a&amp;#34; {{ path.Dir &amp;#34;news.html&amp;#34; }} → &amp;#34;.&amp;#34; {{ path.Dir &amp;#34;a/b/c&amp;#34; }} → &amp;#34;a/b&amp;#34; {{ path.Dir &amp;#34;/x/y/z&amp;#34; }} → &amp;#34;/x/y&amp;#34; </description>
    </item>
    <item>
      <title>path.Ext</title>
      <link>https://gohugo.io/functions/path/ext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/ext/</guid>
      <description>path.Ext returns the file name extension PATH.
The extension is the suffix beginning at the final dot in the final slash-separated element PATH; it is empty if there is no dot.
Note: On Windows, PATH is converted to slash (/) separators.
{{ path.Ext &amp;#34;a/b/c/news.html&amp;#34; }} → &amp;#34;.html&amp;#34; </description>
    </item>
    <item>
      <title>path.Join</title>
      <link>https://gohugo.io/functions/path/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/join/</guid>
      <description>path.Join joins path elements into a single path, adding a separating slash if necessary. All empty strings are ignored.
Note: All path elements on Windows are converted to slash (&amp;rsquo;/&amp;rsquo;) separators.
{{ path.Join &amp;#34;partial&amp;#34; &amp;#34;news.html&amp;#34; }} → &amp;#34;partial/news.html&amp;#34; {{ path.Join &amp;#34;partial/&amp;#34; &amp;#34;news.html&amp;#34; }} → &amp;#34;partial/news.html&amp;#34; {{ path.Join &amp;#34;foo/baz&amp;#34; &amp;#34;bar&amp;#34; }} → &amp;#34;foo/baz/bar&amp;#34; </description>
    </item>
    <item>
      <title>path.Split</title>
      <link>https://gohugo.io/functions/path/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/path/split/</guid>
      <description>path.Split splits PATH immediately following the final slash, separating it into a directory and a base component.
The returned values have the property that PATH = DIR+BASE. If there is no slash in PATH, it returns an empty directory and the base is set to PATH.
Note: On Windows, PATH is converted to slash (/) separators.
{{ $dirFile := path.Split &amp;#34;a/news.html&amp;#34; }} {{ $dirFile.Dir }} → &amp;#34;a/&amp;#34; {{ $dirFile.File }} → &amp;#34;news.</description>
    </item>
    <item>
      <title>transform.Plainify</title>
      <link>https://gohugo.io/functions/transform/plainify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/plainify/</guid>
      <description>{{ &amp;#34;&amp;lt;b&amp;gt;BatMan&amp;lt;/b&amp;gt;&amp;#34; | plainify }} → &amp;#34;BatMan&amp;#34; See also the .PlainWords, .Plain, and .RawContent page variables.</description>
    </item>
    <item>
      <title>inflect.Pluralize</title>
      <link>https://gohugo.io/functions/inflect/pluralize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/inflect/pluralize/</guid>
      <description>{{ &amp;#34;cat&amp;#34; | pluralize }} → &amp;#34;cats&amp;#34; </description>
    </item>
    <item>
      <title>fmt.Print</title>
      <link>https://gohugo.io/functions/fmt/print/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/print/</guid>
      <description>{{ print &amp;#34;foo&amp;#34; }} → &amp;#34;foo&amp;#34; {{ print &amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34; }} → &amp;#34;foobar&amp;#34; {{ print (slice 1 2 3) }} → [1 2 3] </description>
    </item>
    <item>
      <title>fmt.Printf</title>
      <link>https://gohugo.io/functions/fmt/printf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/printf/</guid>
      <description>The documentation for Go&amp;rsquo;s fmt package describes the structure and content of the format string.
{{ $var := &amp;#34;world&amp;#34; }} {{ printf &amp;#34;Hello %s.&amp;#34; $var }} → Hello world. {{ $pi := 3.14159265 }} {{ printf &amp;#34;Pi is approximately %.2f.&amp;#34; $pi }} → 3.14 Use the printf function with the safeHTMLAttr function:
{{ $desc := &amp;#34;Eat at Joe&amp;#39;s&amp;#34; }} &amp;lt;meta name=&amp;#34;description&amp;#34; {{ printf &amp;#34;content=%q&amp;#34; $desc | safeHTMLAttr }}&amp;gt; Hugo renders this to:</description>
    </item>
    <item>
      <title>fmt.Println</title>
      <link>https://gohugo.io/functions/fmt/println/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/println/</guid>
      <description>{{ println &amp;#34;foo&amp;#34; }} → &amp;#34;foo\n&amp;#34; </description>
    </item>
    <item>
      <title>collections.Querify</title>
      <link>https://gohugo.io/functions/collections/querify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/querify/</guid>
      <description>querify takes a set or slice of key-value pairs and returns a query string that can be appended to a URL.
The following examples create a link to a search results page on Google.
&amp;lt;a href=&amp;#34;https://www.google.com?{{ (querify &amp;#34;q&amp;#34; &amp;#34;test&amp;#34; &amp;#34;page&amp;#34; 3) | safeURL }}&amp;#34;&amp;gt;Search&amp;lt;/a&amp;gt; {{ $qs := slice &amp;#34;q&amp;#34; &amp;#34;test&amp;#34; &amp;#34;page&amp;#34; 3 }} &amp;lt;a href=&amp;#34;https://www.google.com?{{ (querify $qs) | safeURL }}&amp;#34;&amp;gt;Search&amp;lt;/a&amp;gt; Both of these examples render the following HTML:
&amp;lt;a href=&amp;#34;https://www.google.com?page=3&amp;amp;q=test&amp;#34;&amp;gt;Search&amp;lt;/a&amp;gt; </description>
    </item>
    <item>
      <title>range</title>
      <link>https://gohugo.io/functions/go-template/range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/go-template/range/</guid>
      <description>See Go&amp;rsquo;s text/template documentation for more details.
Slices Template:
{{ $s := slice &amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34; &amp;#34;baz&amp;#34; }} {{ range $s }} &amp;lt;p&amp;gt;{{ . }}&amp;lt;/p&amp;gt; {{ end }} Result:
&amp;lt;p&amp;gt;foo&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;bar&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;baz&amp;lt;/p&amp;gt; Template:
{{ $s := slice &amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34; &amp;#34;baz&amp;#34; }} {{ range $v := $s }} &amp;lt;p&amp;gt;{{ $v }}&amp;lt;/p&amp;gt; {{ end }} Result:
&amp;lt;p&amp;gt;foo&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;bar&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;baz&amp;lt;/p&amp;gt; Template:
{{ $s := slice &amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34; &amp;#34;baz&amp;#34; }} {{ range $k, $v := $s }} &amp;lt;p&amp;gt;{{ $k }}: {{ $v }}&amp;lt;/p&amp;gt; {{ end }} Result:</description>
    </item>
    <item>
      <title>os.ReadDir</title>
      <link>https://gohugo.io/functions/os/readdir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/os/readdir/</guid>
      <description>The os.ReadDir function resolves the path relative to the root of your project directory. A leading path separator (/) is optional.
With this directory structure:
content/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md This template code:
{{ range os.ReadDir &amp;#34;content&amp;#34; }} {{ .Name }} → {{ .IsDir }} {{ end }} Produces:
about.md → false contact.md → false news → true Note that os.ReadDir is not recursive.</description>
    </item>
    <item>
      <title>os.ReadFile</title>
      <link>https://gohugo.io/functions/os/readfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/os/readfile/</guid>
      <description>The os.ReadFile function attempts to resolve the path relative to the root of your project directory. If a matching file is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.
With a file named README.md in the root of your project directory:
This is **bold** text. This template code:
{{ os.ReadFile &amp;#34;README.md&amp;#34; }} Produces:
This is **bold** text. Note that os.</description>
    </item>
    <item>
      <title>urls.Ref</title>
      <link>https://gohugo.io/functions/urls/ref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/ref/</guid>
      <description>This function takes two arguments:
The context of the page from which to resolve relative paths, typically the current page (.) The path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. {{ ref . &amp;#34;about&amp;#34; }} {{ ref . &amp;#34;about#anchor&amp;#34; }} {{ ref .</description>
    </item>
    <item>
      <title>reflect.IsMap</title>
      <link>https://gohugo.io/functions/reflect/ismap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/reflect/ismap/</guid>
      <description>{{ reflect.IsMap (dict &amp;#34;key&amp;#34; &amp;#34;value&amp;#34;) }} → true {{ reflect.IsMap &amp;#34;yo&amp;#34; }} → false </description>
    </item>
    <item>
      <title>reflect.IsSlice</title>
      <link>https://gohugo.io/functions/reflect/isslice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/reflect/isslice/</guid>
      <description>{{ reflect.IsSlice (slice 1 2 3) }} → true {{ reflect.IsSlice &amp;#34;yo&amp;#34; }} → false </description>
    </item>
    <item>
      <title>urls.RelLangURL</title>
      <link>https://gohugo.io/functions/urls/rellangurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/rellangurl/</guid>
      <description>Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:
Whether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.
Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.</description>
    </item>
    <item>
      <title>urls.RelRef</title>
      <link>https://gohugo.io/functions/urls/relref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/relref/</guid>
      <description>This function takes two arguments:
The context of the page from which to resolve relative paths, typically the current page (.) The path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. {{ relref . &amp;#34;about&amp;#34; }} {{ relref . &amp;#34;about#anchor&amp;#34; }} {{ relref .</description>
    </item>
    <item>
      <title>urls.RelURL</title>
      <link>https://gohugo.io/functions/urls/relurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/relurl/</guid>
      <description>With multilingual configurations, use the relLangURL function instead. The URL returned by this function depends on:
Whether the input begins with a slash The baseURL in site configuration Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.
With baseURL = https://example.org/
{{ relURL &amp;#34;&amp;#34; }} → / {{ relURL &amp;#34;articles&amp;#34; }} → /articles {{ relURL &amp;#34;style.</description>
    </item>
    <item>
      <title>strings.Replace</title>
      <link>https://gohugo.io/functions/strings/replace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/replace/</guid>
      <description>Replace returns a copy of INPUT with all occurrences of OLD replaced with NEW. The number of replacements can be limited with an optional LIMIT argument.
{{ replace &amp;#34;Batman and Robin&amp;#34; &amp;#34;Robin&amp;#34; &amp;#34;Catwoman&amp;#34; }} → &amp;#34;Batman and Catwoman&amp;#34; {{ replace &amp;#34;aabbaabb&amp;#34; &amp;#34;a&amp;#34; &amp;#34;z&amp;#34; 2 }} → &amp;#34;zzbbaabb&amp;#34; </description>
    </item>
    <item>
      <title>strings.ReplaceRE</title>
      <link>https://gohugo.io/functions/strings/replacere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/replacere/</guid>
      <description>By default, replaceRE replaces all matches. You can limit the number of matches with an optional LIMIT argument.
When specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.
Go&amp;rsquo;s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats.</description>
    </item>
    <item>
      <title>safe.CSS</title>
      <link>https://gohugo.io/functions/safe/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/css/</guid>
      <description>In this context, safe means CSS content that matches any of the following:
The CSS3 stylesheet production, such as p { color: purple }. The CSS3 rule production, such as a[href=~&amp;quot;https:&amp;quot;].foo#bar. CSS3 declaration productions, such as color: red; margin: 2px. The CSS3 value production, such as rgba(0, 0, 255, 127). Example: Given style = &amp;quot;color: red;&amp;quot; defined in the front matter of your .md file:
&amp;lt;p style=&amp;quot;{{ .Params.style | safeCSS }}&amp;quot;&amp;gt;…&amp;lt;/p&amp;gt; → &amp;lt;p style=&amp;quot;color: red;&amp;quot;&amp;gt;…&amp;lt;/p&amp;gt; &amp;lt;p style=&amp;quot;{{ .</description>
    </item>
    <item>
      <title>safe.HTML</title>
      <link>https://gohugo.io/functions/safe/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/html/</guid>
      <description>It should not be used for HTML from a third-party, or HTML with unclosed tags or comments.
Given a site-wide hugo.toml with the following copyright value:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; copyright: © 2015 Jane Doe. &amp;lt;a href=&amp;#34;https://creativecommons.org/licenses/by/4.0/&amp;#34;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;. copyright = &amp;#39;© 2015 Jane Doe. &amp;lt;a href=&amp;#34;https://creativecommons.org/licenses/by/4.0/&amp;#34;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;.&amp;#39; { &amp;#34;copyright&amp;#34;: &amp;#34;© 2015 Jane Doe. \u003ca href=\&amp;#34;https://creativecommons.org/licenses/by/4.0/\&amp;#34;\u003eSome rights reserved\u003c/a\u003e.&amp;#34; } {{ .Site.Copyright | safeHTML }} in a template would then output:</description>
    </item>
    <item>
      <title>safe.HTMLAttr</title>
      <link>https://gohugo.io/functions/safe/htmlattr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/htmlattr/</guid>
      <description>Given a site configuration that contains this menu entry:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; menu: main: - name: IRC url: irc://irc.freenode.net/#golang [menu] [[menu.main]] name = &amp;#39;IRC&amp;#39; url = &amp;#39;irc://irc.freenode.net/#golang&amp;#39; { &amp;#34;menu&amp;#34;: { &amp;#34;main&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;IRC&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;irc://irc.freenode.net/#golang&amp;#34; } ] } } Attempting to use the url value directly in an attribute:
{{ range site.Menus.main }} &amp;lt;a href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; {{ end }} Will produce:</description>
    </item>
    <item>
      <title>safe.JS</title>
      <link>https://gohugo.io/functions/safe/js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/js/</guid>
      <description>In this context, safe means the string encapsulates a known safe EcmaScript5 Expression (e.g., (x + y * z())).
Template authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like { foo:bar() }\n[&#39;foo&#39;](), which is both a valid expression and a valid program with a very different meaning.
Example: Given hash = &amp;quot;619c16f&amp;quot; defined in the front matter of your .</description>
    </item>
    <item>
      <title>safe.JSStr</title>
      <link>https://gohugo.io/functions/safe/jsstr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/jsstr/</guid>
      <description>Encapsulates a sequence of characters meant to be embedded between quotes in a JavaScript expression. Use of this type presents a security risk: the encapsulated content should come from a trusted source, as it will be included verbatim in the template output.
Without declaring a variable to be a safe JavaScript string:
{{ $title := &amp;#34;Lilo &amp;amp; Stitch&amp;#34; }} &amp;lt;script&amp;gt; const a = &amp;#34;Title: &amp;#34; + {{ $title }}; &amp;lt;/script&amp;gt; Rendered:</description>
    </item>
    <item>
      <title>safe.URL</title>
      <link>https://gohugo.io/functions/safe/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/safe/url/</guid>
      <description>safeURL declares the provided string as a &amp;ldquo;safe&amp;rdquo; URL or URL substring (see RFC 3986). A URL like javascript:checkThatFormNotEditedBeforeLeavingPage() from a trusted source should go in the page, but by default dynamic javascript: URLs are filtered out since they are a frequently exploited injection vector.
Without safeURL, only the URI schemes http:, https: and mailto: are considered safe by Go templates. If any other URI schemes (e.g., irc: and javascript:) are detected, the whole URL will be replaced with #ZgotmplZ.</description>
    </item>
    <item>
      <title>collections.Seq</title>
      <link>https://gohugo.io/functions/collections/seq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/seq/</guid>
      <description>{{ seq 2 }} → [1 2] {{ seq 0 2 }} → [0 1 2] {{ seq -2 2 }} → [-2 -1 0 1 2] {{ seq -2 2 2 }} → [-2 0 2] Iterate over a sequence of integers:
{{ $product := 1 }} {{ range seq 4 }} {{ $product = mul $product . }} {{ end }} {{ $product }} → 24 </description>
    </item>
    <item>
      <title>crypto.SHA1</title>
      <link>https://gohugo.io/functions/crypto/sha1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/crypto/sha1/</guid>
      <description>{{ sha1 &amp;#34;Hello world&amp;#34; }} → 7b502c3a1f48c8609ae212cdfb639dee39673f5e </description>
    </item>
    <item>
      <title>crypto.SHA256</title>
      <link>https://gohugo.io/functions/crypto/sha256/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/crypto/sha256/</guid>
      <description>{{ sha256 &amp;#34;Hello world&amp;#34; }} → 64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c </description>
    </item>
    <item>
      <title>collections.Shuffle</title>
      <link>https://gohugo.io/functions/collections/shuffle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/shuffle/</guid>
      <description>{{ shuffle (seq 1 2 3) }} → [3 1 2] {{ shuffle (slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;) }} → [b a c] The result will vary from one build to the next.</description>
    </item>
    <item>
      <title>inflect.Singularize</title>
      <link>https://gohugo.io/functions/inflect/singularize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/inflect/singularize/</guid>
      <description>{{ &amp;#34;cats&amp;#34; | singularize }} → &amp;#34;cat&amp;#34; See also the .Data.Singular taxonomy variable for singularizing taxonomy names.</description>
    </item>
    <item>
      <title>site</title>
      <link>https://gohugo.io/functions/site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/site/</guid>
      <description>At the top level of a template that receives the Site object in context, these are equivalent:
{{ .Site.Params.foo }} {{ site.Params.foo }} When the Site object is not in context, use the global site function:
{{ site.Params.foo }} To simplify your templates, use the global site function regardless of whether the Site object is in context.</description>
    </item>
    <item>
      <title>collections.Slice</title>
      <link>https://gohugo.io/functions/collections/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/slice/</guid>
      <description>One use case is the concatenation of elements in combination with the [delimit function]:
{{ $s := slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34; }} {{ $s }} → [a b c] </description>
    </item>
    <item>
      <title>strings.SliceString</title>
      <link>https://gohugo.io/functions/strings/slicestring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/slicestring/</guid>
      <description>For example, 1 and 4 creates a slice including elements 1 through 3. The end index can be omitted; it defaults to the string&amp;rsquo;s length.
{{ slicestr &amp;#34;BatMan&amp;#34; 3 }}` → &amp;#34;Man&amp;#34; {{ slicestr &amp;#34;BatMan&amp;#34; 0 3 }}` → &amp;#34;Bat&amp;#34; </description>
    </item>
    <item>
      <title>collections.Sort</title>
      <link>https://gohugo.io/functions/collections/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/sort/</guid>
      <description>The KEY is optional when sorting slices in ascending order, otherwise it is required. When sorting slices, use the literal value in place of the KEY. See examples below.
The ORDER may be either asc (ascending) or desc (descending). The default sort order is ascending.
Sort a slice The examples below assume this site configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; params: grades: - b - a - c [params] grades = [&amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;] { &amp;#34;params&amp;#34;: { &amp;#34;grades&amp;#34;: [ &amp;#34;b&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;c&amp;#34; ] } } Ascending order Sort slice elements in ascending order using either of these constructs:</description>
    </item>
    <item>
      <title>strings.Split</title>
      <link>https://gohugo.io/functions/strings/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/split/</guid>
      <description>Examples:
{{ split &amp;#34;tag1,tag2,tag3&amp;#34; &amp;#34;,&amp;#34; }} → [&amp;#34;tag1&amp;#34;, &amp;#34;tag2&amp;#34;, &amp;#34;tag3&amp;#34;] {{ split &amp;#34;abc&amp;#34; &amp;#34;&amp;#34; }} → [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;] split essentially does the opposite of delimit. While split creates a slice from a string, delimit creates a string from a slice.</description>
    </item>
    <item>
      <title>cast.ToString</title>
      <link>https://gohugo.io/functions/cast/tostring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/cast/tostring/</guid>
      <description>With a decimal (base 10) input:
{{ string 11 }} → 11 (string) {{ string &amp;#34;11&amp;#34; }} → 11 (string) {{ string 11.1 }} → 11.1 (string) {{ string &amp;#34;11.1&amp;#34; }} → 11.1 (string) {{ string 11.9 }} → 11.9 (string) {{ string &amp;#34;11.9&amp;#34; }} → 11.9 (string) With a binary (base 2) input:
{{ string 0b11 }} → 3 (string) {{ string &amp;#34;0b11&amp;#34; }} → 0b11 (string) With an octal (base 8) input (use either notation):</description>
    </item>
    <item>
      <title>strings.Contains</title>
      <link>https://gohugo.io/functions/strings/contains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/contains/</guid>
      <description>{{ strings.Contains &amp;#34;Hugo&amp;#34; &amp;#34;go&amp;#34; }} → true The check is case sensitive:
{{ strings.Contains &amp;#34;Hugo&amp;#34; &amp;#34;Go&amp;#34; }} → false </description>
    </item>
    <item>
      <title>strings.ContainsAny</title>
      <link>https://gohugo.io/functions/strings/containsany/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/containsany/</guid>
      <description>{{ strings.ContainsAny &amp;#34;Hugo&amp;#34; &amp;#34;gm&amp;#34; }} → true The check is case sensitive:
{{ strings.ContainsAny &amp;#34;Hugo&amp;#34; &amp;#34;Gm&amp;#34; }} → false </description>
    </item>
    <item>
      <title>strings.ContainsNonSpace</title>
      <link>https://gohugo.io/functions/strings/containsnonspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/containsnonspace/</guid>
      <description>{{ strings.ContainsNonSpace &amp;#34;\n&amp;#34; }} → false {{ strings.ContainsNonSpace &amp;#34; &amp;#34; }} → false {{ strings.ContainsNonSpace &amp;#34;\n abc&amp;#34; }} → true Common white space characters include:
&amp;#39;\t&amp;#39;, &amp;#39;\n&amp;#39;, &amp;#39;\v&amp;#39;, &amp;#39;\f&amp;#39;, &amp;#39;\r&amp;#39;, &amp;#39; &amp;#39; See the Unicode Character Database for a complete list.</description>
    </item>
    <item>
      <title>strings.Count</title>
      <link>https://gohugo.io/functions/strings/count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/count/</guid>
      <description>If SUBSTR is an empty string, this function returns 1 plus the number of Unicode code points in STRING.
{{ &amp;#34;aaabaab&amp;#34; | strings.Count &amp;#34;a&amp;#34; }} → 5 {{ &amp;#34;aaabaab&amp;#34; | strings.Count &amp;#34;aa&amp;#34; }} → 2 {{ &amp;#34;aaabaab&amp;#34; | strings.Count &amp;#34;aaa&amp;#34; }} → 1 {{ &amp;#34;aaabaab&amp;#34; | strings.Count &amp;#34;&amp;#34; }} → 8 </description>
    </item>
    <item>
      <title>strings.FirstUpper</title>
      <link>https://gohugo.io/functions/strings/firstupper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/firstupper/</guid>
      <description>{{ strings.FirstUpper &amp;#34;foo&amp;#34; }} → &amp;#34;Foo&amp;#34; </description>
    </item>
    <item>
      <title>strings.HasPrefix</title>
      <link>https://gohugo.io/functions/strings/hasprefix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/hasprefix/</guid>
      <description>{{ hasPrefix &amp;#34;Hugo&amp;#34; &amp;#34;Hu&amp;#34; }} → true </description>
    </item>
    <item>
      <title>strings.HasSuffix</title>
      <link>https://gohugo.io/functions/strings/hassuffix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/hassuffix/</guid>
      <description>{{ hasSuffix &amp;#34;Hugo&amp;#34; &amp;#34;go&amp;#34; }} → true </description>
    </item>
    <item>
      <title>strings.Repeat</title>
      <link>https://gohugo.io/functions/strings/repeat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/repeat/</guid>
      <description>{{ strings.Repeat 3 &amp;#34;yo&amp;#34; }} → &amp;#34;yoyoyo&amp;#34; {{ &amp;#34;yo&amp;#34; | strings.Repeat 3 }} → &amp;#34;yoyoyo&amp;#34; </description>
    </item>
    <item>
      <title>strings.RuneCount</title>
      <link>https://gohugo.io/functions/strings/runecount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/runecount/</guid>
      <description>In contrast with the strings.CountRunes function, which excludes whitespace, strings.RuneCount counts every rune in a string.
{{ &amp;#34;Hello, 世界&amp;#34; | strings.RuneCount }} → 9 </description>
    </item>
    <item>
      <title>strings.TrimLeft</title>
      <link>https://gohugo.io/functions/strings/trimleft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/trimleft/</guid>
      <description>Given the string &amp;quot;abba&amp;quot;, leading &amp;quot;a&amp;quot;&amp;rsquo;s can be removed a follows:
{{ strings.TrimLeft &amp;#34;a&amp;#34; &amp;#34;abba&amp;#34; }} → &amp;#34;bba&amp;#34; Numbers can be handled as well:
{{ strings.TrimLeft 12 1221341221 }} → &amp;#34;341221&amp;#34; </description>
    </item>
    <item>
      <title>strings.TrimPrefix</title>
      <link>https://gohugo.io/functions/strings/trimprefix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/trimprefix/</guid>
      <description>Given the string &amp;quot;aabbaa&amp;quot;, the specified prefix is only removed if &amp;quot;aabbaa&amp;quot; starts with it:
{{ strings.TrimPrefix &amp;#34;a&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;abbaa&amp;#34; {{ strings.TrimPrefix &amp;#34;aa&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;bbaa&amp;#34; {{ strings.TrimPrefix &amp;#34;aaa&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;aabbaa&amp;#34; </description>
    </item>
    <item>
      <title>strings.TrimRight</title>
      <link>https://gohugo.io/functions/strings/trimright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/trimright/</guid>
      <description>Given the string &amp;quot;abba&amp;quot;, trailing &amp;quot;a&amp;quot;&amp;rsquo;s can be removed a follows:
{{ strings.TrimRight &amp;#34;a&amp;#34; &amp;#34;abba&amp;#34; }} → &amp;#34;abb&amp;#34; Numbers can be handled as well:
{{ strings.TrimRight 12 1221341221 }} → &amp;#34;122134&amp;#34; </description>
    </item>
    <item>
      <title>strings.TrimSuffix</title>
      <link>https://gohugo.io/functions/strings/trimsuffix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/trimsuffix/</guid>
      <description>Given the string &amp;quot;aabbaa&amp;quot;, the specified suffix is only removed if &amp;quot;aabbaa&amp;quot; ends with it:
{{ strings.TrimSuffix &amp;#34;a&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;aabba&amp;#34; {{ strings.TrimSuffix &amp;#34;aa&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;aabb&amp;#34; {{ strings.TrimSuffix &amp;#34;aaa&amp;#34; &amp;#34;aabbaa&amp;#34; }} → &amp;#34;aabbaa&amp;#34; </description>
    </item>
    <item>
      <title>strings.Substr</title>
      <link>https://gohugo.io/functions/strings/substr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/substr/</guid>
      <description>It normally takes two argument: start and length. It can also take one argument: start, i.e. length is omitted, in which case the substring starting from start until the end of the string will be returned.
To extract characters from the end of the string, use a negative start number.
If length is given and is negative, that number of characters will be omitted from the end of string.
{{ substr &amp;#34;abcdef&amp;#34; 0 }} → &amp;#34;abcdef&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; 1 }} → &amp;#34;bcdef&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; 0 1 }} → &amp;#34;a&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; 1 1 }} → &amp;#34;b&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; 0 -1 }} → &amp;#34;abcde&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; 1 -1 }} → &amp;#34;bcde&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -1 }} → &amp;#34;f&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -2 }} → &amp;#34;ef&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -1 1 }} → &amp;#34;f&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -2 1 }} → &amp;#34;e&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -3 -1 }} → &amp;#34;de&amp;#34; {{ substr &amp;#34;abcdef&amp;#34; -3 -2 }} → &amp;#34;d&amp;#34; </description>
    </item>
    <item>
      <title>collections.SymDiff</title>
      <link>https://gohugo.io/functions/collections/symdiff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/symdiff/</guid>
      <description>Example:
{{ slice 1 2 3 | symdiff (slice 3 4) }} → [1 2 4] Also see https://en.wikipedia.org/wiki/Symmetric_difference</description>
    </item>
    <item>
      <title>templates.Exists</title>
      <link>https://gohugo.io/functions/templates/exists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/templates/exists/</guid>
      <description>A template file is any file living below the layouts directories of either the project or any of its theme components including partials and shortcodes.
The function is particularly handy with dynamic path. The following example ensures the build will not break on a .Type missing its dedicated header partial.
{{ $partialPath := printf &amp;#34;headers/%s.html&amp;#34; .Type }} {{ if templates.Exists ( printf &amp;#34;partials/%s&amp;#34; $partialPath ) }} {{ partial $partialPath . }} {{ else }} {{ partial &amp;#34;headers/default.</description>
    </item>
    <item>
      <title>time.AsTime</title>
      <link>https://gohugo.io/functions/time/astime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/time/astime/</guid>
      <description>time converts a timestamp string with an optional default location into a time.Time structure so you can access its fields:
{{ time &amp;#34;2016-05-28&amp;#34; }} → &amp;#34;2016-05-28T00:00:00Z&amp;#34; {{ (time &amp;#34;2016-05-28&amp;#34;).YearDay }} → 149 {{ mul 1000 (time &amp;#34;2016-05-28T10:30:00.00+10:00&amp;#34;).Unix }} → 1464395400000, or Unix time in milliseconds Using locations The optional TIMEZONE argument is a string that sets a default time zone (or more specific, the location, which represents the collection of time offsets in a geographical area) that is associated with the specified time value.</description>
    </item>
    <item>
      <title>time.Format</title>
      <link>https://gohugo.io/functions/time/format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/time/format/</guid>
      <description>{{ $t := &amp;#34;2023-01-27T23:44:58-08:00&amp;#34; }} {{ $format := &amp;#34;2 Jan 2006&amp;#34; }} {{ $t | time.Format $format }} → 27 Jan 2023 {{ $t = time.AsTime $t }} {{ $t | time.Format $format }} → 27 Jan 2023 Layout string Format a time.Time value based on Go&amp;rsquo;s reference time:
Mon Jan 2 15:04:05 MST 2006 Create a format string using these components:
Description Valid components Year &amp;quot;2006&amp;quot; &amp;quot;06&amp;quot; Month &amp;quot;Jan&amp;quot; &amp;quot;January&amp;quot; &amp;quot;01&amp;quot; &amp;quot;1&amp;quot; Day of the week &amp;quot;Mon&amp;quot; &amp;quot;Monday&amp;quot; Day of the month &amp;quot;2&amp;quot; &amp;quot;_2&amp;quot; &amp;quot;02&amp;quot; Day of the year &amp;quot;__2&amp;quot; &amp;quot;002&amp;quot; Hour &amp;quot;15&amp;quot; &amp;quot;3&amp;quot; &amp;quot;03&amp;quot; Minute &amp;quot;4&amp;quot; &amp;quot;04&amp;quot; Second &amp;quot;5&amp;quot; &amp;quot;05&amp;quot; AM/PM mark &amp;quot;PM&amp;quot; Time zone offsets &amp;quot;-0700&amp;quot; &amp;quot;-07:00&amp;quot; &amp;quot;-07&amp;quot; &amp;quot;-070000&amp;quot; &amp;quot;-07:00:00&amp;quot; Replace the sign in the format string with a Z to print Z instead of an offset for the UTC zone.</description>
    </item>
    <item>
      <title>time.ParseDuration</title>
      <link>https://gohugo.io/functions/time/parseduration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/time/parseduration/</guid>
      <description>time.ParseDuration parses a duration string into a time.Duration structure so you can access its fields. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as 300ms, -1.5h or 2h45m. Valid time units are ns, us (or µs), ms, s, m, h.
You can perform time operations on the returned time.Duration value:
{{ printf &amp;#34;There are %.0f seconds in one day.</description>
    </item>
    <item>
      <title>strings.Title</title>
      <link>https://gohugo.io/functions/strings/title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/title/</guid>
      <description>{{ title &amp;#34;table of contents (TOC)&amp;#34; }} → &amp;#34;Table of Contents (TOC)&amp;#34; By default, Hugo adheres to the capitalization rules in the Associated Press (AP) Stylebook. Change your site configuration if you would prefer to follow the Chicago Manual of Style, or to use Go&amp;rsquo;s convention of capitalizing every word.</description>
    </item>
    <item>
      <title>transform.CanHighlight</title>
      <link>https://gohugo.io/functions/transform/canhighlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/canhighlight/</guid>
      <description>{{ transform.CanHighlight &amp;#34;go&amp;#34; }} → true {{ transform.CanHighlight &amp;#34;klingon&amp;#34; }} → false </description>
    </item>
    <item>
      <title>transform.HighlightCodeBlock</title>
      <link>https://gohugo.io/functions/transform/highlightcodeblock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/highlightcodeblock/</guid>
      <description>This function is only useful within a code block render hook.
Given the context passed into a code block render hook, transform.HighlightCodeBlock returns a HighlightResult object with two methods.
.Wrapped (template.HTML) Returns highlighted code wrapped in &amp;lt;div&amp;gt;, &amp;lt;pre&amp;gt;, and &amp;lt;code&amp;gt; elements. This is identical to the value returned by the transform.Highlight function. .Inner (template.HTML) Returns highlighted code without any wrapping elements, allowing you to create your own wrapper. {{ $result := transform.</description>
    </item>
    <item>
      <title>transform.Remarshal</title>
      <link>https://gohugo.io/functions/transform/remarshal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/remarshal/</guid>
      <description>The FORMAT must be one of json, toml, yaml, or xml. If the INPUT is a string of serialized data, it must be valid JSON, TOML, YAML, or XML.
This function is primarily a helper for Hugo&amp;rsquo;s documentation, used to convert configuration and front matter examples to JSON, TOML, and YAML.
This is not a general purpose converter, and may change without notice if required for Hugo&amp;rsquo;s documentation site.
Example 1 Convert a string of TOML to JSON.</description>
    </item>
    <item>
      <title>transform.Unmarshal</title>
      <link>https://gohugo.io/functions/transform/unmarshal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/transform/unmarshal/</guid>
      <description>The function accepts either a Resource created in Hugo Pipes or via Page Bundles, or simply a string. The two examples below will produce the same map:
{{ $greetings := &amp;#34;hello = \&amp;#34;Hello Hugo\&amp;#34;&amp;#34; | transform.Unmarshal }}` {{ $greetings := &amp;#34;hello = \&amp;#34;Hello Hugo\&amp;#34;&amp;#34; | resources.FromString &amp;#34;data/greetings.toml&amp;#34; | transform.Unmarshal }} In both the above examples, you get a map you can work with:
{{ $greetings.hello }} The above prints Hello Hugo.</description>
    </item>
    <item>
      <title>strings.Trim</title>
      <link>https://gohugo.io/functions/strings/trim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/trim/</guid>
      <description>{{ trim &amp;#34;++Batman--&amp;#34; &amp;#34;+-&amp;#34; }} → &amp;#34;Batman&amp;#34; trim requires the second argument, which tells the function specifically what to remove from the first argument. There is no default value for the second argument, so the following usage will not work:
{{ trim .Inner }} Instead, the following example tells trim to remove extra new lines from the content contained in the shortcode .Inner variable:
{{ trim .Inner &amp;#34;\n&amp;#34; }} Go templates also provide a simple method for trimming whitespace from either side of a Go tag by including a hyphen (-).</description>
    </item>
    <item>
      <title>strings.Truncate</title>
      <link>https://gohugo.io/functions/strings/truncate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/truncate/</guid>
      <description>Since Go templates are HTML-aware, truncate will intelligently handle normal strings vs HTML strings:
{{ &amp;#34;&amp;lt;em&amp;gt;Keep my HTML&amp;lt;/em&amp;gt;&amp;#34; | safeHTML | truncate 10 }} → &amp;lt;em&amp;gt;Keep my …&amp;lt;/em&amp;gt; If you have a raw string that contains HTML tags you want to remain treated as HTML, you will need to convert the string to HTML using the safeHTML template function before sending the value to truncate. Otherwise, the HTML tags will be escaped when passed through the truncate function.</description>
    </item>
    <item>
      <title>collections.Union</title>
      <link>https://gohugo.io/functions/collections/union/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/union/</guid>
      <description>Given two arrays (or slices) A and B, this function will return a new array that contains the elements or objects that belong to either A or to B or to both. The elements supported are strings, integers, and floats (only float64).
{{ union (slice 1 2 3) (slice 3 4 5) }} &amp;lt;!-- returns [1 2 3 4 5] --&amp;gt; {{ union (slice 1 2 3) nil }} &amp;lt;!-- returns [1 2 3] --&amp;gt; {{ union nil (slice 1 2 3) }} &amp;lt;!</description>
    </item>
    <item>
      <title>collections.Uniq</title>
      <link>https://gohugo.io/functions/collections/uniq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/uniq/</guid>
      <description>{{ slice 1 3 2 1 | uniq }} → [1 3 2] </description>
    </item>
    <item>
      <title>strings.ToUpper</title>
      <link>https://gohugo.io/functions/strings/toupper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/strings/toupper/</guid>
      <description>Note that upper can be applied in your templates in more than one way:
{{ upper &amp;#34;BatMan&amp;#34; }} → &amp;#34;BATMAN&amp;#34; {{ &amp;#34;BatMan&amp;#34; | upper }} → &amp;#34;BATMAN&amp;#34; </description>
    </item>
    <item>
      <title>urls.URLize</title>
      <link>https://gohugo.io/functions/urls/urlize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/urlize/</guid>
      <description>The following examples pull from a content file with the following front matter:
content/blog/greatest-city.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- location: Chicago IL tags: - pizza - beer - hot dogs title: The World&amp;#39;s Greatest City --- +++ location = &amp;#39;Chicago IL&amp;#39; tags = [&amp;#39;pizza&amp;#39;, &amp;#39;beer&amp;#39;, &amp;#39;hot dogs&amp;#39;] title = &amp;#34;The World&amp;#39;s Greatest City&amp;#34; +++ { &amp;#34;location&amp;#34;: &amp;#34;Chicago IL&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;pizza&amp;#34;, &amp;#34;beer&amp;#34;, &amp;#34;hot dogs&amp;#34; ], &amp;#34;title&amp;#34;: &amp;#34;The World&amp;#39;s Greatest City&amp;#34; } The following might be used as a partial within a single page template:</description>
    </item>
    <item>
      <title>urlquery</title>
      <link>https://gohugo.io/functions/go-template/urlquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/go-template/urlquery/</guid>
      <description>See Go&amp;rsquo;s text/template documentation for more details.
This template code:
{{ $u := urlquery &amp;#34;https://&amp;#34; &amp;#34;example.com&amp;#34; | safeURL }} &amp;lt;a href=&amp;#34;https://example.org?url={{ $u }}&amp;#34;&amp;gt;Link&amp;lt;/a&amp;gt; Is rendered to:
&amp;lt;a href=&amp;#34;https://example.org?url=https%3A%2F%2Fexample.com&amp;#34;&amp;gt;Link&amp;lt;/a&amp;gt; </description>
    </item>
    <item>
      <title>urls.JoinPath</title>
      <link>https://gohugo.io/functions/urls/joinpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/joinpath/</guid>
      <description>{{ urls.JoinPath }} → &amp;#34;&amp;#34; {{ urls.JoinPath &amp;#34;&amp;#34; }} → &amp;#34;/&amp;#34; {{ urls.JoinPath &amp;#34;a&amp;#34; }} → &amp;#34;a&amp;#34; {{ urls.JoinPath &amp;#34;a&amp;#34; &amp;#34;b&amp;#34; }} → &amp;#34;a/b&amp;#34; {{ urls.JoinPath &amp;#34;/a&amp;#34; &amp;#34;b&amp;#34; }} → &amp;#34;/a/b&amp;#34; {{ urls.JoinPath &amp;#34;https://example.org&amp;#34; &amp;#34;b&amp;#34; }} → &amp;#34;https://example.org/b&amp;#34; {{ urls.JoinPath (slice &amp;#34;a&amp;#34; &amp;#34;b&amp;#34;) }} → &amp;#34;a/b&amp;#34; Unlike the path.Join function, urls.JoinPath retains consecutive leading slashes.</description>
    </item>
    <item>
      <title>urls.Parse</title>
      <link>https://gohugo.io/functions/urls/parse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/urls/parse/</guid>
      <description>The urls.Parse function parses a URL into a URL structure. The URL may be relative (a path, without a host) or absolute (starting with a scheme). Hugo throws an error when parsing an invalid URL.
{{ $url := &amp;#34;https://example.org:123/foo?a=6&amp;amp;b=7#bar&amp;#34; }} {{ $u := urls.Parse $url }} {{ $u.IsAbs }} → true {{ $u.Scheme }} → https {{ $u.Host }} → example.org:123 {{ $u.Hostname }} → example.org {{ $u.RequestURI }} → /foo?</description>
    </item>
    <item>
      <title>fmt.Warnf</title>
      <link>https://gohugo.io/functions/fmt/warnf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/fmt/warnf/</guid>
      <description>The documentation for Go&amp;rsquo;s fmt package describes the structure and content of the format string.
Like the printf function, the warnf function evaluates the format string. It then prints the result to the WARNING log. Hugo prints each unique message once to avoid flooding the log with duplicate warnings.
{{ warnf &amp;#34;Copyright notice missing from site configuration&amp;#34; }} </description>
    </item>
    <item>
      <title>collections.Where</title>
      <link>https://gohugo.io/functions/collections/where/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/collections/where/</guid>
      <description>where filters an array to only the elements containing a matching value for a given field.
It works in a similar manner to the where keyword in SQL.
{{ range where .Pages &amp;#34;Section&amp;#34; &amp;#34;foo&amp;#34; }} {{ .Content }} {{ end }} It can be used by dot-chaining the second argument to refer to a nested element of a value.
content/example.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- series: golang title: Example --- +++ series = &amp;#39;golang&amp;#39; title = &amp;#39;Example&amp;#39; +++ { &amp;#34;series&amp;#34;: &amp;#34;golang&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Example&amp;#34; } {{ range where .</description>
    </item>
    <item>
      <title>with</title>
      <link>https://gohugo.io/functions/go-template/with/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/functions/go-template/with/</guid>
      <description>See Go&amp;rsquo;s text/template documentation for more details.
An alternative way of writing an if statement and then referencing the same value is to use with instead. with rebinds the context (.) within its scope and skips the block if the variable is absent, unset or empty.
The set of empty values is defined by the Go templates package. Empty values include false, the number zero, and the empty string.
If you want to render a block if an index or key is present in a slice, array, channel or map, regardless of whether the value is empty, you should use isset instead.</description>
    </item>
  </channel>
</rss>
