<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>content management on Hugo</title>
    <link>https://gohugo.io/categories/content-management/</link>
    <description>Recent content in content management on Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://gohugo.io/categories/content-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Content management</title>
      <link>https://gohugo.io/content-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/</guid>
      <description>A static site generator needs to extend beyond front matter and a couple of templates to be both scalable and manageable. Hugo was designed with not only developers in mind, but also content managers and authors.</description>
    </item>
    <item>
      <title>Content organization</title>
      <link>https://gohugo.io/content-management/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/organization/</guid>
      <description>Page bundles Hugo 0.32 announced page-relative images and other resources packaged into Page Bundles.
These terms are connected, and you also need to read about Page Resources and Image Processing to get the full picture.
The illustration shows three bundles. Note that the home page bundle cannot contain other content pages, although other files (images etc.) are allowed. The bundle documentation is a work in progress. We will publish more comprehensive docs about this soon.</description>
    </item>
    <item>
      <title>Page bundles</title>
      <link>https://gohugo.io/content-management/page-bundles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/page-bundles/</guid>
      <description>Page Bundles are a way to group Page Resources.
A Page Bundle can be one of:
Leaf Bundle (leaf means it has no children) Branch Bundle (home page, section, taxonomy terms, taxonomy list) Leaf Bundle Branch Bundle Usage Collection of content and attachments for single pages Collection of attachments for section pages (home page, section, taxonomy terms, taxonomy list) Index file name index.md 1 _index.md 1 Allowed Resources Page and non-page (like images, PDF, etc.</description>
    </item>
    <item>
      <title>Content formats</title>
      <link>https://gohugo.io/content-management/formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/formats/</guid>
      <description>You can put any file type into your /content directories, but Hugo uses the markup front matter value if set or the file extension (see Markup identifiers in the table below) to determine if the markup needs to be processed, e.g.:
Markdown converted to HTML Shortcodes processed Layout applied List of content formats The current list of content formats in Hugo:
Name Markup identifiers Comment Goldmark md, markdown, goldmark Note that you can set the default handler of md and markdown to something else, see Configure Markup.</description>
    </item>
    <item>
      <title>Diagrams</title>
      <link>https://gohugo.io/content-management/diagrams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/diagrams/</guid>
      <description>New in v0.93.0 GoAT diagrams (Ascii) Hugo supports GoAT natively. This means that this code block:
```goat . . . .--- 1 .-- 1 / 1 / \ | | .---+ .-+ + / \ .---+---. .--+--. | &amp;#39;--- 2 | &amp;#39;-- 2 / \ 2 + + | | | | ---+ ---+ + / \ / \ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \ / 3 / \ / \ | | | | | | | | &amp;#39;---+ &amp;#39;-+ + 1 2 3 4 1 2 3 4 1 2 3 4 &amp;#39;--- 4 &amp;#39;-- 4 \ 4 ``` Will be rendered as:</description>
    </item>
    <item>
      <title>Front matter</title>
      <link>https://gohugo.io/content-management/front-matter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/front-matter/</guid>
      <description>Front matter allows you to keep metadata attached to an instance of a content type&amp;mdash;i.e., embedded inside a content file&amp;mdash;and is one of the many features that gives Hugo its strength.
Front matter formats Hugo supports four formats for front matter, each with their own identifying tokens.
TOML identified by opening and closing +++. YAML identified by opening and closing ---. JSON a single JSON object surrounded by &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo;, followed by a new line.</description>
    </item>
    <item>
      <title>Build options</title>
      <link>https://gohugo.io/content-management/build-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/build-options/</guid>
      <description>They are stored in a reserved front matter object named _build with the following defaults:
yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; _build: list: always publishResources: true render: always [_build] list = &amp;#39;always&amp;#39; publishResources = true render = &amp;#39;always&amp;#39; { &amp;#34;_build&amp;#34;: { &amp;#34;list&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;publishResources&amp;#34;: true, &amp;#34;render&amp;#34;: &amp;#34;always&amp;#34; } } render If always, the page will be treated as a published page, holding its dedicated output files (index.html, etc&amp;hellip;) and permalink.</description>
    </item>
    <item>
      <title>Page resources</title>
      <link>https://gohugo.io/content-management/page-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/page-resources/</guid>
      <description>Page resources are only accessible from page bundles, those directories with index.md or _index.md files at their root. Page resources are only available to the page with which they are bundled.
In this example, first-post is a page bundle with access to 10 page resources including audio, data, documents, images, and video. Although second-post is also a page bundle, it has no page resources and is unable to directly access the page resources associated with first-post.</description>
    </item>
    <item>
      <title>Image processing</title>
      <link>https://gohugo.io/content-management/image-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/image-processing/</guid>
      <description>Image resources To process an image you must access the file as a page resource, global resource, or remote resource.
Page resource A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.
content/ └── posts/ └── post-1/ &amp;lt;-- page bundle ├── index.md └── sunset.jpg &amp;lt;-- page resource To access an image as a page resource:</description>
    </item>
    <item>
      <title>Shortcodes</title>
      <link>https://gohugo.io/content-management/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/shortcodes/</guid>
      <description>What a shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &amp;lt;iframe&amp;gt;&amp;rsquo;s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.
Hugo created shortcodes to circumvent these limitations.
A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template.</description>
    </item>
    <item>
      <title>Related content</title>
      <link>https://gohugo.io/content-management/related/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/related/</guid>
      <description>Hugo uses a set of factors to identify a page&amp;rsquo;s related content based on front matter parameters. This can be tuned to the desired set of indices and parameters or left to Hugo&amp;rsquo;s default Related Content configuration.
List related content To list up to 5 related pages (which share the same date or keyword parameters) is as simple as including something similar to this partial in your single page template:</description>
    </item>
    <item>
      <title>Sections</title>
      <link>https://gohugo.io/content-management/sections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/sections/</guid>
      <description>Overview A section is a top-level content directory, or any content directory with an _index.md file. A content directory with an _index.md file is also known as a branch bundle. Section templates receive one or more page collections in context.
Although top-level directories without _index.md files are sections, we recommend creating _index.md files in all sections.
A typical site consists of one or more sections. For example:
content/ ├── articles/ &amp;lt;-- section (top-level directory) │ ├── 2022/ │ │ ├── article-1/ │ │ │ ├── cover.</description>
    </item>
    <item>
      <title>Content types</title>
      <link>https://gohugo.io/content-management/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/types/</guid>
      <description>A content type is a way to organize your content. Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path. E.g. content/blog/my-first-event.md will be of type blog if no type is set.
A content type is used to
Determine how the content is rendered. See Template Lookup Order and Content Views for more. Determine which archetype template to use for new content.</description>
    </item>
    <item>
      <title>Archetypes</title>
      <link>https://gohugo.io/content-management/archetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/archetypes/</guid>
      <description>Overview A content file consists of front matter and markup. The markup is typically markdown, but Hugo also supports other content formats. Front matter can be TOML, YAML, or JSON.
The hugo new content command creates a new file in the content directory, using an archetype as a template. This is the default archetype:
archetypes/default.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- date: &amp;#39;{{ .Date }}&amp;#39; draft: true title: &amp;#39;{{ replace .</description>
    </item>
    <item>
      <title>Taxonomies</title>
      <link>https://gohugo.io/content-management/taxonomies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/taxonomies/</guid>
      <description>What is a taxonomy? Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications of logical relationships between content.
Definitions Taxonomy a categorization that can be used to classify content Term a key within the taxonomy Value a piece of content assigned to a term Example taxonomy: movie website Let&amp;rsquo;s assume you are making a website about movies. You may want to include the following taxonomies:
Actors Directors Studios Genre Year Awards Then, in each of the movies, you would specify terms for each of these taxonomies (i.</description>
    </item>
    <item>
      <title>Content summaries</title>
      <link>https://gohugo.io/content-management/summaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/summaries/</guid>
      <description>With the use of the .Summary page variable, Hugo generates summaries of content to use as a short version in summary views.
Summary splitting options Automatic Summary Split Manual Summary Split Front Matter Summary It is natural to accompany the summary with links to the original content, and a common design pattern is to see this link in the form of a &amp;ldquo;Read More &amp;hellip;&amp;rdquo; button. See the .RelPermalink, .Permalink, and .</description>
    </item>
    <item>
      <title>Links and cross references</title>
      <link>https://gohugo.io/content-management/cross-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/cross-references/</guid>
      <description>The ref and relref shortcodes display the absolute and relative permalinks to a document, respectively.
Use of ref and relref The ref and relref shortcodes require a single parameter: the path to a content document, with or without a file extension, with or without an anchor. Paths without a leading / are first resolved relative to the current page, then to the remainder of the site.
. └── content ├── about | ├── _index.</description>
    </item>
    <item>
      <title>URL management</title>
      <link>https://gohugo.io/content-management/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/urls/</guid>
      <description>Overview By default, when Hugo renders a page, the resulting URL matches the file path within the content directory. For example:
content/posts/post-1.md → https://example.org/posts/post-1/ You can change the structure and appearance of URLs with front matter values and site configuration options.
Front matter slug Set the slug in front matter to override the last segment of the path. The slug value does not affect section pages.
content/posts/post-1.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- slug: my-first-post title: My First Post --- +++ slug = &amp;#39;my-first-post&amp;#39; title = &amp;#39;My First Post&amp;#39; +++ { &amp;#34;slug&amp;#34;: &amp;#34;my-first-post&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;My First Post&amp;#34; } The resulting URL will be:</description>
    </item>
    <item>
      <title>Menus</title>
      <link>https://gohugo.io/content-management/menus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/menus/</guid>
      <description>Overview To create a menu for your site:
Define the menu entries Localize each entry Render the menu with a template Create multiple menus, either flat or nested. For example, create a main menu for the header, and a separate menu for the footer.
There are three ways to define menu entries:
Automatically In front matter In site configuration Although you can use these methods in combination when defining a menu, the menu will be easier to conceptualize and maintain if you use one method throughout the site.</description>
    </item>
    <item>
      <title>Static files</title>
      <link>https://gohugo.io/content-management/static-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/static-files/</guid>
      <description>By default, the static/ directory in the site project is used for all static files (e.g. stylesheets, JavaScript, images). The static files are served on the site root path (eg. if you have the file static/image.png you can access it using http://{server-url}/image.png, to include it in a document you can use ![Example image](/image.png) ).
Hugo can be configured to look into a different directory, or even multiple directories for such static files by configuring the staticDir parameter in the site configuration.</description>
    </item>
    <item>
      <title>Table of contents</title>
      <link>https://gohugo.io/content-management/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/toc/</guid>
      <description>Previously, there was no out-of-the-box way to specify which heading levels you want the TOC to render. See the related GitHub discussion (#1778). As such, the resulting &amp;lt;nav id=&amp;quot;TableOfContents&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/nav&amp;gt; was going to start at &amp;lt;h1&amp;gt; when pulling from {{ .Content }}.
Hugo v0.60.0 made a switch to Goldmark as the default library for Markdown which has improved and configurable implementation of TOC. Take a look at how to configure TOC for Goldmark renderer.</description>
    </item>
    <item>
      <title>Multilingual mode</title>
      <link>https://gohugo.io/content-management/multilingual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/multilingual/</guid>
      <description>You should define the available languages in a languages section in your site configuration.
Also See Hugo Multilingual Part 1: Content translation.
Configure languages This is the default language configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; languages: en: disabled: false languageCode: &amp;#34;&amp;#34; languageDirection: &amp;#34;&amp;#34; languageName: &amp;#34;&amp;#34; title: &amp;#34;&amp;#34; weight: 0 [languages] [languages.en] disabled = false languageCode = &amp;#39;&amp;#39; languageDirection = &amp;#39;&amp;#39; languageName = &amp;#39;&amp;#39; title = &amp;#39;&amp;#39; weight = 0 { &amp;#34;languages&amp;#34;: { &amp;#34;en&amp;#34;: { &amp;#34;disabled&amp;#34;: false, &amp;#34;languageCode&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;languageDirection&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;languageName&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;weight&amp;#34;: 0 } } } This is an example of a site configuration for a multilingual project.</description>
    </item>
    <item>
      <title>Syntax highlighting</title>
      <link>https://gohugo.io/content-management/syntax-highlighting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gohugo.io/content-management/syntax-highlighting/</guid>
      <description>Hugo uses Chroma as its code highlighter; it is built in Go and is really, really fast.
Configure syntax highlighter See Configure Highlight.
Generate syntax highlighter CSS If you run with markup.highlight.noClasses=false in your site configuration, you need a style sheet.
You can generate one with Hugo:
hugo gen chromastyles --style=monokai &amp;gt; syntax.css Run hugo gen chromastyles -h for more options. See https://xyproto.github.io/splash/docs/ for a gallery of available styles.
Highlight shortcode Highlighting is carried out via the built-in highlight shortcode.</description>
    </item>
  </channel>
</rss>
